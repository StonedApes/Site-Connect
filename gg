app.py - from flask import Flask, render_template, request, redirect, url_for, flash, send_file, g, session, abort, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from flask_wtf import FlaskForm
from wtforms import StringField, IntegerField, SelectField, TextAreaField, DateField, SubmitField, PasswordField, FileField
from wtforms.validators import DataRequired, NumberRange, Email, ValidationError, Length
from werkzeug.security import generate_password_hash, check_password_hash
from flask_caching import Cache
from datetime import datetime, timedelta, date
import os
import requests
from email.mime.text import MIMEText
import smtplib
import json
from uuid import uuid4
from sqlalchemy.sql import text
import re
from flask_socketio import SocketIO, emit
from werkzeug.utils import secure_filename
from flask_paginate import Pagination, get_page_args
import logging
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from io import BytesIO
from flask_restful import Api, Resource
from functools import wraps
from flask import session as flask_session
from dotenv import load_dotenv
import pytz

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__, template_folder='templates', static_folder='static')
app.config['TEMPLATES_AUTO_RELOAD'] = True
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', str(uuid4()))  # Secure random key
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('SQLALCHEMY_DATABASE_URI', 'sqlite:///construction.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)
app.config['CACHE_TYPE'] = 'redis' if os.environ.get('REDIS_URL') else 'simple'
app.config['UPLOAD_FOLDER'] = os.path.join(app.root_path, 'static/uploads')
app.config['ALLOWED_EXTENSIONS'] = {'.pdf', '.png', '.jpg', '.jpeg'}
app.config['ALLOWED_MIME_TYPES'] = {'application/pdf', 'image/png', 'image/jpeg'}
app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024  # 10MB
app.config['SQLALCHEMY_ECHO'] = False  # Disable query logging in production

# Initialize extensions
db = SQLAlchemy(app)
cache = Cache(app)
socketio = SocketIO(app, cors_allowed_origins="*")
login_manager = LoginManager()
login_manager.init_app(app)
# User loader callback for Flask-Login
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))
login_manager.login_view = 'login'
api = Api(app)

# Timezone for IST
IST = pytz.timezone('Asia/Kolkata')

# Custom filter for strftime
@app.template_filter('strftime')
def strftime_filter(value, format='%Y-%m-%d %H:%M'):
    if isinstance(value, str):
        try:
            value = datetime.strptime(value, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            return value
    return value.strftime(format) if value else ''

# Database Models
class Company(db.Model):
    __tablename__ = 'companies'
    company_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    users = db.relationship('User', backref='company', lazy=True)
    employees = db.relationship('Employee', backref='company', lazy=True)
    orders = db.relationship('Order', backref='company', lazy=True)
    incidents = db.relationship('Incident', backref='company', lazy=True)
    subcontractors = db.relationship('Subcontractor', backref='company', lazy=True)
    payments = db.relationship('Payment', backref='company', lazy=True)
    daily_reports = db.relationship('DailyReport', backref='company', lazy=True)
    equipment = db.relationship('Equipment', backref='company', lazy=True)
    weather = db.relationship('Weather', backref='company', lazy=True)
    blueprints = db.relationship('Blueprint', backref='company', lazy=True)
    blueprint_comments = db.relationship('BlueprintComment', backref='company', lazy=True)
    tasks = db.relationship('Task', backref='company', lazy=True)
    timesheets = db.relationship('Timesheet', backref='company', lazy=True)
    inventory = db.relationship('Inventory', backref='company', lazy=True)
    safety_audits = db.relationship('SafetyAudit', backref='company', lazy=True)
    licenses = db.relationship('License', backref='company', lazy=True)
    inductions = db.relationship('Induction', backref='company', lazy=True)
    permits = db.relationship('Permit', backref='company', lazy=True)
    projects = db.relationship('Project', backref='company', lazy=True)
    documents = db.relationship('Document', backref='company', lazy=True)
    audit_logs = db.relationship('AuditLog', backref='company', lazy=True)
    sites = db.relationship('Site', backref='company', lazy=True)

class User(UserMixin, db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    role_id = db.Column(db.Integer, db.ForeignKey('roles.role_id'), nullable=False)
    role = db.relationship('Role', backref='users', lazy='joined')  # Eager loading
    audit_logs = db.relationship('AuditLog', backref='user', lazy=True)

class Role(db.Model):
    __tablename__ = 'roles'
    role_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False, unique=True)
    permissions = db.relationship('Permission', secondary='role_permissions', backref='roles', lazy='joined')

class Permission(db.Model):
    __tablename__ = 'permissions'
    permission_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False, unique=True)

class RolePermission(db.Model):
    __tablename__ = 'role_permissions'
    role_id = db.Column(db.Integer, db.ForeignKey('roles.role_id'), primary_key=True)
    permission_id = db.Column(db.Integer, db.ForeignKey('permissions.permission_id'), primary_key=True)

class Employee(db.Model):
    __tablename__ = 'employees'
    employee_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    role = db.Column(db.String(50), nullable=False)
    phone = db.Column(db.String(20))
    licenses = db.relationship('License', backref='employee', lazy=True)
    inductions = db.relationship('Induction', backref='employee', lazy=True)
    timesheets = db.relationship('Timesheet', backref='employee', lazy=True)
    tasks = db.relationship('Task', backref='employee', lazy=True)
    project_assignments = db.relationship('ProjectAssignment', backref='employee', lazy=True)

class Order(db.Model):
    __tablename__ = 'orders'
    order_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    item = db.Column(db.String(100), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    site_id = db.Column(db.Integer, db.ForeignKey('sites.site_id'), nullable=False)
    site = db.relationship('Site', backref='orders', lazy=True)
    status = db.Column(db.String(20), nullable=False)
    vehicle_id = db.Column(db.Integer, db.ForeignKey('vehicles.vehicle_id'))
    comments = db.Column(db.Text)
    rating = db.Column(db.Integer, default=0)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    vehicle = db.relationship('Vehicle', backref='orders', lazy=True)

class Vehicle(db.Model):
    __tablename__ = 'vehicles'
    vehicle_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    status = db.Column(db.String(20), nullable=False)
    latitude = db.Column(db.Float)
    longitude = db.Column(db.Float)

class Incident(db.Model):
    __tablename__ = 'incidents'
    incident_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    type = db.Column(db.String(50), nullable=False)
    description = db.Column(db.Text, nullable=False)
    location = db.Column(db.String(100))
    severity = db.Column(db.String(20), nullable=False)
    status = db.Column(db.String(20), nullable=False)
    date = db.Column(db.Date, nullable=False)
    reported_by = db.Column(db.String(50), nullable=False)

class Subcontractor(db.Model):
    __tablename__ = 'subcontractors'
    subcontractor_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    agreement_status = db.Column(db.String(20), nullable=False)
    payment_status = db.Column(db.String(20), nullable=False)
    payments = db.relationship('Payment', backref='subcontractor', lazy=True)

class Payment(db.Model):
    __tablename__ = 'payments'
    payment_id = db.Column(db.Integer, primary_key=True)
    subcontractor_id = db.Column(db.Integer, db.ForeignKey('subcontractors.subcontractor_id'), nullable=False)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    milestone = db.Column(db.String(100), nullable=False)
    amount = db.Column(db.Float, nullable=False)
    due_date = db.Column(db.Date, nullable=False)
    status = db.Column(db.String(20), nullable=False)

class DailyReport(db.Model):
    __tablename__ = 'daily_reports'
    report_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    site_id = db.Column(db.Integer, db.ForeignKey('sites.site_id'), nullable=False)
    site = db.relationship('Site', backref='daily_reports', lazy=True)
    date = db.Column(db.Date, nullable=False)
    manpower = db.Column(db.Integer, nullable=False)
    safety_activities = db.Column(db.Text)
    progress_notes = db.Column(db.Text)
    reported_by = db.Column(db.String(50), nullable=False)

class Equipment(db.Model):
    __tablename__ = 'equipment'
    equipment_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    type = db.Column(db.String(50), nullable=False)
    status = db.Column(db.String(20), default='Available')
    last_maintenance_date = db.Column(db.Date)
    next_maintenance_date = db.Column(db.Date, nullable=False)
    maintenance_notes = db.Column(db.Text)

class Weather(db.Model):
    __tablename__ = 'weather'
    weather_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    site_id = db.Column(db.Integer, db.ForeignKey('sites.site_id'), nullable=False)
    site = db.relationship('Site', backref='weather', lazy=True)
    date = db.Column(db.Date, nullable=False)
    temperature = db.Column(db.Float, nullable=False)
    condition = db.Column(db.String(100), nullable=False)
    precipitation = db.Column(db.Integer, nullable=False)
    wind_speed = db.Column(db.Float, nullable=False)
    warning = db.Column(db.String(100))

class Blueprint(db.Model):
    __tablename__ = 'blueprints'
    blueprint_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    title = db.Column(db.String(100), nullable=False)
    file_url = db.Column(db.String(255), nullable=False)
    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)
    uploaded_by = db.Column(db.String(50), nullable=False)
    comments = db.relationship('BlueprintComment', backref='blueprint', lazy=True)

class BlueprintComment(db.Model):
    __tablename__ = 'blueprint_comments'
    comment_id = db.Column(db.Integer, primary_key=True)
    blueprint_id = db.Column(db.Integer, db.ForeignKey('blueprints.blueprint_id'), nullable=False)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    comment_text = db.Column(db.Text, nullable=False)
    commented_at = db.Column(db.DateTime, default=datetime.utcnow)
    commenter = db.Column(db.String(50), nullable=False)

class Task(db.Model):
    __tablename__ = 'tasks'
    task_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text)
    status = db.Column(db.String(20), nullable=False)
    due_date = db.Column(db.Date, nullable=False)
    assigned_to = db.Column(db.Integer, db.ForeignKey('employees.employee_id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    project_id = db.Column(db.Integer, db.ForeignKey('projects.project_id'))
    project = db.relationship('Project', backref='tasks', lazy=True)

class Timesheet(db.Model):
    __tablename__ = 'timesheets'
    timesheet_id = db.Column(db.Integer, primary_key=True)
    employee_id = db.Column(db.Integer, db.ForeignKey('employees.employee_id'), nullable=False)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    clock_in = db.Column(db.DateTime, nullable=False)
    clock_out = db.Column(db.DateTime)
    break_duration = db.Column(db.Integer, nullable=False)
    status = db.Column(db.String(20), nullable=False)
    approved_by = db.Column(db.String(50))

class Inventory(db.Model):
    __tablename__ = 'inventory'
    inventory_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    item_name = db.Column(db.String(100), nullable=False)
    category = db.Column(db.String(50), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    reorder_point = db.Column(db.Integer, nullable=False)
    unit_price = db.Column(db.Float)
    location = db.Column(db.String(100))

class SafetyAudit(db.Model):
    __tablename__ = 'safety_audits'
    audit_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    site_id = db.Column(db.Integer, db.ForeignKey('sites.site_id'), nullable=False)
    site = db.relationship('Site', backref='safety_audits', lazy=True)
    audit_date = db.Column(db.Date, nullable=False)
    description = db.Column(db.Text, nullable=False)
    status = db.Column(db.String(20), nullable=False)

class License(db.Model):
    __tablename__ = 'licenses'
    license_id = db.Column(db.Integer, primary_key=True)
    employee_id = db.Column(db.Integer, db.ForeignKey('employees.employee_id'), nullable=False)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    license_type = db.Column(db.String(100), nullable=False)
    issue_date = db.Column(db.Date, nullable=False)
    expiry_date = db.Column(db.Date, nullable=False)

class Induction(db.Model):
    __tablename__ = 'inductions'
    induction_id = db.Column(db.Integer, primary_key=True)
    employee_id = db.Column(db.Integer, db.ForeignKey('employees.employee_id'), nullable=False)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    induction_type = db.Column(db.String(100), nullable=False)
    completion_date = db.Column(db.Date, nullable=False)

class Permit(db.Model):
    __tablename__ = 'permits'
    permit_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    site_id = db.Column(db.Integer, db.ForeignKey('sites.site_id'), nullable=False)
    site = db.relationship('Site', backref='permits', lazy=True)
    permit_type = db.Column(db.String(100), nullable=False)
    issue_date = db.Column(db.Date, nullable=False)
    expiry_date = db.Column(db.Date, nullable=False)

class Site(db.Model):
    __tablename__ = 'sites'
    site_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    latitude = db.Column(db.Float, nullable=False)
    longitude = db.Column(db.Float, nullable=False)

class Project(db.Model):
    __tablename__ = 'projects'
    project_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text)
    start_date = db.Column(db.Date, nullable=False)
    end_date = db.Column(db.Date, nullable=False)
    status = db.Column(db.String(20), nullable=False)
    milestones = db.relationship('Milestone', backref='project', lazy=True)
    assignments = db.relationship('ProjectAssignment', backref='project', lazy=True)

class Milestone(db.Model):
    __tablename__ = 'milestones'
    milestone_id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('projects.project_id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    due_date = db.Column(db.Date, nullable=False)
    status = db.Column(db.String(20), nullable=False)

class ProjectAssignment(db.Model):
    __tablename__ = 'project_assignments'
    assignment_id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('projects.project_id'), nullable=False)
    employee_id = db.Column(db.Integer, db.ForeignKey('employees.employee_id'), nullable=False)
    role = db.Column(db.String(50), nullable=False)

class Document(db.Model):
    __tablename__ = 'documents'
    document_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    title = db.Column(db.String(100), nullable=False)
    file_url = db.Column(db.String(255), nullable=False)
    version = db.Column(db.Integer, nullable=False, default=1)
    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)
    uploaded_by = db.Column(db.String(50), nullable=False)

class AuditLog(db.Model):
    __tablename__ = 'audit_logs'
    log_id = db.Column(db.Integer, primary_key=True)
    company_id = db.Column(db.Integer, db.ForeignKey('companies.company_id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    action = db.Column(db.String(100), nullable=False)
    details = db.Column(db.Text)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

# Forms
class PasswordValidator:
    def __call__(self, form, field):
        password = field.data
        if not re.search(r'[A-Z]', password):
            raise ValidationError('Password must contain at least one uppercase letter.')
        if not re.search(r'[a-z]', password):
            raise ValidationError('Password must contain at least one lowercase letter.')
        if not re.search(r'[0-9]', password):
            raise ValidationError('Password must contain at least one digit.')
        if not re.search(r'[!@#$%^&*]', password):
            raise ValidationError('Password must contain at least one special character.')

class OrderForm(FlaskForm):
    item = StringField('Item', validators=[DataRequired(), Length(max=100)])
    quantity = IntegerField('Quantity', validators=[DataRequired(), NumberRange(min=1)])
    site_id = SelectField('Site', coerce=int, validators=[DataRequired()])
    comments = TextAreaField('Comments')
    submit = SubmitField('Submit Order')

class LicenseForm(FlaskForm):
    employee_id = SelectField('Employee', coerce=int, validators=[DataRequired()])
    license_type = StringField('License Type', validators=[DataRequired(), Length(max=100)])
    issue_date = DateField('Issue Date', validators=[DataRequired()])
    expiry_date = DateField('Expiry Date', validators=[DataRequired()])
    submit = SubmitField('Add License')

    def validate_expiry_date(self, field):
        if field.data <= self.issue_date.data:
            raise ValidationError('Expiry date must be after issue date.')

class EmployeeForm(FlaskForm):
    name = StringField('Name', validators=[DataRequired(), Length(max=100)])
    email = StringField('Email', validators=[DataRequired(), Email(), Length(max=100)])
    role = StringField('Role', validators=[DataRequired(), Length(max=50)])
    phone = StringField('Phone', validators=[Length(max=20)])
    submit = SubmitField('Add Employee')

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(max=50)])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')

class CompanyLoginForm(FlaskForm):
    company_name = StringField('Company Name', validators=[DataRequired(), Length(max=100)])
    username = StringField('Username', validators=[DataRequired(), Length(max=50)])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')

class RegisterForm(FlaskForm):
    company_name = StringField('Company Name', validators=[DataRequired(), Length(max=100)])
    username = StringField('Username', validators=[DataRequired(), Length(max=50)])
    password = PasswordField('Password', validators=[DataRequired(), Length(min=8), PasswordValidator()])
    role = SelectField('Role', choices=[('user', 'User'), ('admin', 'Admin')], validators=[DataRequired()])
    submit = SubmitField('Register')

class IncidentForm(FlaskForm):
    type = SelectField('Type', choices=[('Incident', 'Incident'), ('Near-Miss', 'Near-Miss'), ('Hazard', 'Hazard')], validators=[DataRequired()])
    description = TextAreaField('Description', validators=[DataRequired()])
    location = StringField('Location', validators=[Length(max=100)])
    severity = SelectField('Severity', choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High')], validators=[DataRequired()])
    submit = SubmitField('Report Incident')

class PaymentForm(FlaskForm):
    milestone = StringField('Milestone', validators=[DataRequired(), Length(max=100)])
    amount = IntegerField('Amount', validators=[DataRequired(), NumberRange(min=0)])
    due_date = DateField('Due Date', validators=[DataRequired()])
    submit = SubmitField('Add Payment')

class DailyReportForm(FlaskForm):
    site_id = SelectField('Site', coerce=int, validators=[DataRequired()])
    date = DateField('Date', validators=[DataRequired()])
    manpower = IntegerField('Manpower', validators=[DataRequired(), NumberRange(min=0)])
    safety_activities = TextAreaField('Safety Activities')
    progress_notes = TextAreaField('Progress Notes')
    submit = SubmitField('Submit Report')

class EquipmentForm(FlaskForm):
    name = StringField('Name', validators=[DataRequired(), Length(max=100)])
    type = StringField('Type', validators=[DataRequired(), Length(max=50)])
    last_maintenance_date = DateField('Last Maintenance Date')
    next_maintenance_date = DateField('Next Maintenance Date', validators=[DataRequired()])
    status = SelectField('Status', choices=[('Available', 'Available'), ('In Use', 'In Use'), ('Maintenance', 'Maintenance')])
    maintenance_notes = TextAreaField('Maintenance Notes')
    submit = SubmitField('Add Equipment')

class BlueprintForm(FlaskForm):
    title = StringField('Title', validators=[DataRequired(), Length(max=100)])
    file = FileField('File', validators=[DataRequired()])
    submit = SubmitField('Upload Blueprint')

class TaskForm(FlaskForm):
    title = StringField('Title', validators=[DataRequired(), Length(max=100)])
    description = TextAreaField('Description')
    assigned_to = SelectField('Assigned To', coerce=int, validators=[DataRequired()])
    due_date = DateField('Due Date', validators=[DataRequired()])
    project_id = SelectField('Project', coerce=int, validators=[DataRequired()])
    submit = SubmitField('Add Task')

class TimesheetForm(FlaskForm):
    action = SelectField('Action', choices=[('clock_in', 'Clock In'), ('clock_out', 'Clock Out')], validators=[DataRequired()])
    break_duration = IntegerField('Break Duration (minutes)', default=0, validators=[NumberRange(min=0)])
    submit = SubmitField('Submit')

class InventoryForm(FlaskForm):
    item_name = StringField('Item Name', validators=[DataRequired(), Length(max=100)])
    category = StringField('Category', validators=[DataRequired(), Length(max=50)])
    quantity = IntegerField('Quantity', validators=[DataRequired(), NumberRange(min=0)])
    reorder_point = IntegerField('Reorder Point', validators=[DataRequired(), NumberRange(min=0)])
    unit_price = IntegerField('Unit Price', validators=[NumberRange(min=0)])
    location = StringField('Location', validators=[Length(max=100)])
    submit = SubmitField('Add Item')

class SafetyAuditForm(FlaskForm):
    site_id = SelectField('Site', coerce=int, validators=[DataRequired()])
    audit_date = DateField('Audit Date', validators=[DataRequired()])
    description = TextAreaField('Description', validators=[DataRequired()])
    submit = SubmitField('Schedule Audit')

class InductionForm(FlaskForm):
    employee_id = SelectField('Employee', coerce=int, validators=[DataRequired()])
    induction_type = StringField('Induction Type', validators=[DataRequired(), Length(max=100)])
    completion_date = DateField('Completion Date', validators=[DataRequired()])
    submit = SubmitField('Add Induction')

class PermitForm(FlaskForm):
    site_id = SelectField('Site', coerce=int, validators=[DataRequired()])
    permit_type = StringField('Permit Type', validators=[DataRequired(), Length(max=100)])
    issue_date = DateField('Issue Date', validators=[DataRequired()])
    expiry_date = DateField('Expiry Date', validators=[DataRequired()])
    submit = SubmitField('Add Permit')

class AddCompanyForm(FlaskForm):
    company_name = StringField('Company Name', validators=[DataRequired(), Length(max=100)])
    admin_username = StringField('Admin Username', validators=[DataRequired(), Length(max=50)])
    admin_password = PasswordField('Admin Password', validators=[DataRequired(), Length(min=8), PasswordValidator()])
    submit = SubmitField('Add Company')

class SettingsForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(max=50)])
    password = PasswordField('New Password', validators=[Length(min=8), PasswordValidator()])
    email = StringField('Email', validators=[Email(), Length(max=100)])
    submit = SubmitField('Update Settings')

class ProjectForm(FlaskForm):
    name = StringField('Project Name', validators=[DataRequired(), Length(max=100)])
    description = TextAreaField('Description')
    start_date = DateField('Start Date', validators=[DataRequired()])
    end_date = DateField('End Date', validators=[DataRequired()])
    status = SelectField('Status', choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], validators=[DataRequired()])
    submit = SubmitField('Create Project')

class MilestoneForm(FlaskForm):
    name = StringField('Milestone Name', validators=[DataRequired(), Length(max=100)])
    due_date = DateField('Due Date', validators=[DataRequired()])
    status = SelectField('Status', choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], validators=[DataRequired()])
    submit = SubmitField('Add Milestone')

class ProjectAssignmentForm(FlaskForm):
    employee_id = SelectField('Employee', coerce=int, validators=[DataRequired()])
    role = StringField('Role', validators=[DataRequired(), Length(max=50)])
    submit = SubmitField('Assign Employee')

class DocumentForm(FlaskForm):
    title = StringField('Title', validators=[DataRequired(), Length(max=100)])
    file = FileField('File', validators=[DataRequired()])
    submit = SubmitField('Upload Document')

class ChatForm(FlaskForm):
    message = TextAreaField('Message', validators=[DataRequired()])
    submit = SubmitField('Send')

class RoleForm(FlaskForm):
    name = StringField('Role Name', validators=[DataRequired(), Length(max=50)])
    permissions = SelectField('Permissions', choices=[], multiple=True, coerce=int, validators=[DataRequired()])
    submit = SubmitField('Create Role')

# RBAC Decorator
def permission_required(permission):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not current_user.is_authenticated or not current_user.role:
                flash('No role assigned.', 'danger')
                return redirect(url_for('dashboard'))
            if permission not in [p.name for p in current_user.role.permissions]:
                flash('Unauthorized access.', 'danger')
                return redirect(url_for('dashboard'))
            return f(*args, **kwargs)
        return decorated_function
    return decorator

# Database initialization function
def init_db():
    with app.app_context():
        db.drop_all()  # Drop all existing tables to avoid conflicts
        db.create_all()  # Create all tables based on current models
        if not Company.query.first():
            default_company = Company(name='Default Company')
            db.session.add(default_company)
            db.session.commit()
            default_role = Role(name='Admin')
            db.session.add(default_role)
            db.session.commit()
            permissions = [
                Permission(name='view_orders'),
                Permission(name='create_orders'),
                Permission(name='edit_orders'),
                Permission(name='view_incidents'),
                Permission(name='create_incidents'),
                Permission(name='manage_users'),
                Permission(name='manage_projects'),
                Permission(name='view_documents'),
                Permission(name='upload_documents'),
            ]
            db.session.add_all(permissions)
            db.session.commit()
            for perm in permissions:
                db.session.add(RolePermission(role_id=default_role.role_id, permission_id=perm.permission_id))
            db.session.commit()
            hashed_password = generate_password_hash('admin123')
            admin_user = User(
                company_id=default_company.company_id,
                username='admin',
                password=hashed_password,
                role_id=default_role.role_id
            )
            db.session.add(admin_user)
            db.session.commit()
        # Create indexes
        with db.engine.connect() as conn:
            conn.execute(text('CREATE INDEX IF NOT EXISTS idx_company_id ON orders(company_id)'))
            conn.execute(text('CREATE INDEX IF NOT EXISTS idx_employee_id ON licenses(employee_id)'))
            conn.execute(text('CREATE INDEX IF NOT EXISTS idx_company_id ON tasks(company_id)'))
            conn.execute(text('CREATE INDEX IF NOT EXISTS idx_company_id ON projects(company_id)'))
            conn.commit()

# Utility Functions
@cache.memoize(timeout=60)
def get_notifications_count(company_id):
    today = date.today()
    with db.session() as session:
        counts = session.execute(
            text("""
                SELECT 
                    (SELECT COUNT(*) FROM licenses WHERE company_id = :company_id AND expiry_date <= :future AND expiry_date >= :today) AS expiring_licenses,
                    (SELECT COUNT(*) FROM licenses WHERE company_id = :company_id AND expiry_date < :today) AS expired_licenses,
                    (SELECT COUNT(*) FROM incidents WHERE company_id = :company_id AND status = 'Open') AS open_incidents,
                    (SELECT COUNT(*) FROM equipment WHERE company_id = :company_id AND next_maintenance_date <= :future30) AS equipment_due,
                    (SELECT COUNT(*) FROM inventory WHERE company_id = :company_id AND quantity <= reorder_point) AS low_inventory,
                    (SELECT COUNT(*) FROM payments WHERE company_id = :company_id AND status = 'Pending' AND due_date < :today) AS overdue_payments,
                    (SELECT COUNT(*) FROM safety_audits WHERE company_id = :company_id AND status = 'Scheduled' AND audit_date <= :future30 AND audit_date >= :today) AS upcoming_audits
            """),
            {'company_id': company_id, 'today': today, 'future': today + timedelta(days=60), 'future30': today + timedelta(days=30)}
        ).first()
        return sum(counts) if counts else 0

def send_email_notification(to_email, subject, body):
    smtp_server = os.environ.get('SMTP_SERVER')
    smtp_port = os.environ.get('SMTP_PORT', 587)
    smtp_user = os.environ.get('SMTP_USER')
    smtp_password = os.environ.get('SMTP_PASSWORD')
    if not all([smtp_server, smtp_user, smtp_password]):
        logger.error("SMTP configuration missing")
        return
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = smtp_user
    msg['To'] = to_email
    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(smtp_user, smtp_password)
            server.sendmail(msg['From'], [msg['To']], msg.as_string())
    except Exception as e:
        logger.error(f"Email error: {e}")

def allowed_file(filename, file):
    ext = os.path.splitext(filename.lower())[1]
    if ext not in app.config['ALLOWED_EXTENSIONS']:
        return False
    content_type = getattr(file, 'content_type', None)
    return content_type in app.config['ALLOWED_MIME_TYPES']

def log_action(action, details=None):
    if current_user.is_authenticated:
        log = AuditLog(
            company_id=current_user.company_id,
            user_id=current_user.id,
            action=action,
            details=json.dumps(details) if details else None
        )
        db.session.add(log)
        db.session.commit()

# Error Handler
@app.errorhandler(Exception)
def handle_error(e):
    logger.error(f"Internal Server Error: {str(e)}", exc_info=True)
    notifications_count = get_notifications_count(current_user.company_id) if current_user.is_authenticated else 0
    return render_template('error.html', error=str(e), notifications_count=notifications_count), 500

# Routes
@app.route('/')
def index():
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('dashboard'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and check_password_hash(user.password, form.password.data):
            login_user(user)
            log_action('login', {'username': user.username})
            flash('Login successful!', 'success')
            next_page = request.args.get('next')
            return redirect(next_page or url_for('dashboard'))
        flash('Invalid credentials.', 'danger')
    notifications = [
        "New incident reported at Site A (2025-06-02 15:00)",
        "Task #302 completed by Jane Smith (2025-06-02 15:00)",
        "Order #103 delivered to Site C (2025-06-02 15:00)"
    ]
    return render_template('login.html', form=form, notifications_count=0, notifications=notifications)

@app.route('/company_login', methods=['GET', 'POST'])
@permission_required('create_orders')
def company_login():
    if current_user.is_authenticated:
        return redirect(url_for('dashboard'))
    form = CompanyLoginForm()
    if form.validate_on_submit():
        company = Company.query.filter_by(name=form.company_name.data).first()
        if not company:
            flash('Company not found.', 'danger')
            return render_template('company_login.html', form=form, notifications_count=0)
        user = User.query.filter_by(username=form.username.data, company_id=company.company_id).first()
        if user and check_password_hash(user.password, form.password.data):
            login_user(user)
            log_action('company_login', {'username': user.username, 'company': company.name})
            flash('Login successful!', 'success')
            return redirect(url_for('dashboard'))
        flash('Invalid credentials.', 'danger')
    return render_template('company_login.html', form=form, notifications_count=0)

@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('login'))
    form = RegisterForm()
    if form.validate_on_submit():
        company = Company.query.filter_by(name=form.company_name.data).first()
        if not company:
            company = Company(name=form.company_name.data)
            db.session.add(company)
            db.session.commit()
        if User.query.filter_by(username=form.username.data).first():
            flash('Username already exists.', 'danger')
            return render_template('register.html', form=form, notifications_count=0)
        role = Role.query.filter_by(name=form.role.data.capitalize()).first()
        if not role:
            role = Role(name=form.role.data.capitalize())
            db.session.add(role)
            db.session.commit()
        hashed_password = generate_password_hash(form.password.data)
        user = User(
            company_id=company.company_id,
            username=form.username.data,
            password=hashed_password,
            role_id=role.role_id
        )
        db.session.add(user)
        db.session.commit()
        log_action('register', {'username': user.username, 'company': company.name})
        flash('Registration successful! Please log in.', 'success')
        return redirect(url_for('login'))
    return render_template('register.html', form=form, notifications_count=0)

@app.route('/logout')
@login_required
def logout():
    username = current_user.username
    logout_user()
    log_action('logout', {'username': username})
    flash('Logged out successfully!', 'success')
    return redirect(url_for('login'))

@app.route('/dashboard')
@login_required
def dashboard():
    try:
        with db.session() as db_session:
            # Comprehensive mock data
            status_counts = [15, 10, 12, 8]  # Pending, Received, In Production, Shipped
            incident_types = [5, 7, 3]  # High, Medium, Low
            task_progress = [66, 34]  # Completed, Remaining
            recent_orders = [
                {'order_id': '001', 'item': 'Concrete Mix', 'status': 'Shipped'},
                {'order_id': '002', 'item': 'Steel Beams', 'status': 'In Production'},
                {'order_id': '003', 'item': 'Tools Kit', 'status': 'Pending'}
            ]
            projects = [
                {'name': 'Office Building', 'status': 'In Progress', 'end_date': '2025-12-01'},
                {'name': 'Warehouse', 'status': 'Not Started', 'end_date': '2026-03-15'},
                {'name': 'Bridge', 'status': 'Planned', 'end_date': '2026-06-30'}
            ]
            weather_data = {'Site A': {'temp': 28, 'condition': 'Sunny'}, 'Site B': {'temp': 22, 'condition': 'Cloudy'}}
            compliance_alerts = [
                {'type': 'License', 'name': 'John Doe', 'expiry_date': '2025-06-15', 'days_remaining': 5},
                {'type': 'Permit', 'name': 'Site A', 'expiry_date': '2025-06-20', 'days_remaining': 10}
            ]

            return render_template('dashboard.html', status_counts=status_counts, incident_types=incident_types,
                                  task_progress=task_progress, recent_orders=recent_orders, projects=projects,
                                  weather_data=weather_data, compliance_alerts=compliance_alerts)
    except Exception as e:
        logger.error(f"Error in dashboard view: {e}", exc_info=True)
        return handle_error(e)
    
@app.route('/profile')
@login_required
def profile():
    return render_template('profile.html', user=current_user)

@app.route('/analytics')
@login_required
def analytics():
    order_trends = db.session.query(
        db.func.strftime('%Y-%m-%d', Order.timestamp).label('order_date'),
        db.func.count()
    ).filter_by(company_id=current_user.company_id).group_by('order_date').order_by('order_date').limit(5).all()
    order_trends_labels = [row[0] for row in order_trends]
    order_trends_data = [row[1] for row in order_trends]

    incident_summary = db.session.query(
        Incident.type,
        db.func.count()
    ).filter_by(company_id=current_user.company_id).group_by(Incident.type).all()
    incident_summary_labels = [row[0] for row in incident_summary]
    incident_summary_data = [row[1] for row in incident_summary]

    return render_template('analytics.html', order_trends={'labels': order_trends_labels, 'data': order_trends_data},
                           incident_summary={'labels': incident_summary_labels, 'data': incident_summary_data})

@app.route('/order_form', methods=['GET', 'POST'])
@login_required
@permission_required('create_orders')
def order_form():
    form = OrderForm()
    form.site_id.choices = [(s.site_id, s.name) for s in Site.query.filter_by(company_id=current_user.company_id).all()]
    if form.validate_on_submit():
        order = Order(
            company_id=current_user.company_id,
            item=form.item.data,
            quantity=form.quantity.data,
            site_id=form.site_id.data,
            status='Pending',
            comments=form.comments.data
        )
        db.session.add(order)
        db.session.commit()
        socketio.emit('new_order', {'order_id': order.order_id, 'item': order.item, 'site_id': order.site_id})
        log_action('create_order', {'order_id': order.order_id})
        flash('Order submitted successfully!', 'success')
        return redirect(url_for('order_form'))
    return render_template('order_form.html', form=form)

@app.route('/orders')
@login_required
@permission_required('view_orders')
def orders():
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Order.query.filter_by(company_id=current_user.company_id).count()
    orders = Order.query.filter_by(company_id=current_user.company_id).order_by(Order.timestamp.desc()).offset(offset).limit(per_page).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('orders.html', orders=orders, pagination=pagination)

@app.route('/track_orders')
@login_required
@permission_required('view_orders')
def track_orders():
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Order.query.filter_by(company_id=current_user.company_id).count()
    orders = Order.query.filter_by(company_id=current_user.company_id).order_by(Order.timestamp.desc()).offset(offset).limit(per_page).all()
    subcontractors = Subcontractor.query.filter_by(company_id=current_user.company_id).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('track_orders.html', orders=orders, subcontractors=subcontractors, pagination=pagination)

@app.route('/track_order/<int:order_id>')
@login_required
@permission_required('view_orders')
def track_order(order_id):
    order = Order.query.filter_by(order_id=order_id, company_id=current_user.company_id).first()
    if not order:
        flash('Order not found.', 'danger')
        return redirect(url_for('track_orders'))
    vehicle = Vehicle.query.filter_by(vehicle_id=order.vehicle_id, company_id=current_user.company_id).first()
    return render_template('track_order.html', order=order, latitude=vehicle.latitude if vehicle else None,
                           longitude=vehicle.longitude if vehicle else None)

@app.route('/rate_order/<int:order_id>', methods=['GET', 'POST'])
@login_required
@permission_required('edit_orders')
def rate_order(order_id):
    order = Order.query.filter_by(order_id=order_id, company_id=current_user.company_id).first()
    if not order:
        flash('Order not found.', 'danger')
        return redirect(url_for('orders'))
    if request.method == 'POST':
        rating = request.form.get('rating', type=int)
        if not 1 <= rating <= 5:
            flash('Rating must be between 1 and 5.', 'danger')
            return redirect(url_for('rate_order', order_id=order_id))
        order.rating = rating
        db.session.commit()
        log_action('rate_order', {'order_id': order_id, 'rating': rating})
        flash('Order rated successfully!', 'success')
        return redirect(url_for('orders'))
    return render_template('rate_order.html', order=order)

@app.route('/edit_order/<int:order_id>', methods=['GET', 'POST'])
@login_required
@permission_required('edit_orders')
def edit_order(order_id):
    order = Order.query.filter_by(order_id=order_id, company_id=current_user.company_id).first()
    if not order:
        flash('Order not found.', 'danger')
        return redirect(url_for('orders'))
    form = OrderForm(obj=order)
    form.site_id.choices = [(s.site_id, s.name) for s in Site.query.filter_by(company_id=current_user.company_id).all()]
    if form.validate_on_submit():
        order.item = form.item.data
        order.quantity = form.quantity.data
        order.site_id = form.site_id.data
        order.comments = form.comments.data
        db.session.commit()
        log_action('edit_order', {'order_id': order_id})
        flash('Order updated successfully!', 'success')
        return redirect(url_for('orders'))
    return render_template('edit_order.html', form=form, order=order)

@app.route('/cancel_order/<int:order_id>')
@login_required
@permission_required('edit_orders')
def cancel_order(order_id):
    order = Order.query.filter_by(order_id=order_id, company_id=current_user.company_id).first()
    if not order:
        flash('Order not found.', 'danger')
        return redirect(url_for('orders'))
    if order.status != 'Pending':
        flash('Only pending orders can be canceled.', 'danger')
        return redirect(url_for('orders'))
    order.status = 'Canceled'
    db.session.commit()
    socketio.emit('order_canceled', {'order_id': order_id})
    log_action('cancel_order', {'order_id': order_id})
    flash('Order canceled successfully!', 'success')
    return redirect(url_for('orders'))

@app.route('/incidents', methods=['GET', 'POST'])
@login_required
@permission_required('create_incidents')
def incidents():
    form = IncidentForm()
    if form.validate_on_submit():
        incident = Incident(
            company_id=current_user.company_id,
            type=form.type.data,
            description=form.description.data,
            location=form.location.data,
            severity=form.severity.data,
            status='Open',
            date=date.today(),
            reported_by=current_user.username
        )
        db.session.add(incident)
        db.session.commit()
        socketio.emit('new_incident', {'incident_id': incident.incident_id, 'type': incident.type})
        log_action('create_incident', {'incident_id': incident.incident_id})
        flash('Incident reported successfully!', 'success')
        return redirect(url_for('incidents'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Incident.query.filter_by(company_id=current_user.company_id).count()
    incidents = Incident.query.filter_by(company_id=current_user.company_id).order_by(Incident.date.desc()).offset(offset).limit(per_page).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('incidents.html', form=form, incidents=incidents, pagination=pagination)

@app.route('/subcontractor_portal')
@login_required
def subcontractor_portal():
    subcontractors = Subcontractor.query.filter_by(company_id=current_user.company_id).all()
    return render_template('subcontractor_portal.html', subcontractors=subcontractors)

@app.route('/subcontractor_payments/<int:subcontractor_id>', methods=['GET', 'POST'])
@login_required
def subcontractor_payments(subcontractor_id):
    subcontractor = Subcontractor.query.filter_by(subcontractor_id=subcontractor_id, company_id=current_user.company_id).first()
    if not subcontractor:
        flash('Subcontractor not found.', 'danger')
        return redirect(url_for('subcontractor_portal'))
    form = PaymentForm()
    if form.validate_on_submit():
        payment = Payment(
            subcontractor_id=subcontractor_id,
            company_id=current_user.company_id,
            milestone=form.milestone.data,
            amount=form.amount.data,
            due_date=form.due_date.data,
            status='Pending'
        )
        db.session.add(payment)
        db.session.commit()
        log_action('add_payment', {'payment_id': payment.payment_id})
        flash('Payment milestone added successfully!', 'success')
        return redirect(url_for('subcontractor_payments', subcontractor_id=subcontractor_id))
    if request.method == 'POST' and 'payment_id' in request.form:
        payment_id = request.form.get('payment_id', type=int)
        payment = Payment.query.filter_by(payment_id=payment_id, company_id=current_user.company_id).first()
        if payment:
            payment.status = 'Paid'
            db.session.commit()
            log_action('mark_payment_paid', {'payment_id': payment_id})
            flash('Payment marked as paid!', 'success')
    payments = Payment.query.filter_by(subcontractor_id=subcontractor_id, company_id=current_user.company_id).order_by(Payment.due_date).all()
    return render_template('subcontractor_payments.html', subcontractor=subcontractor, form=form, payments=payments)

@app.route('/daily_reports', methods=['GET', 'POST'])
@login_required
def daily_reports():
    form = DailyReportForm()
    form.site_id.choices = [(s.site_id, s.name) for s in Site.query.filter_by(company_id=current_user.company_id).all()]
    if form.validate_on_submit():
        report = DailyReport(
            company_id=current_user.company_id,
            site_id=form.site_id.data,
            date=form.date.data,
            manpower=form.manpower.data,
            safety_activities=form.safety_activities.data,
            progress_notes=form.progress_notes.data,
            reported_by=current_user.username
        )
        db.session.add(report)
        db.session.commit()
        log_action('create_daily_report', {'report_id': report.report_id})
        flash('Daily report submitted successfully!', 'success')
        return redirect(url_for('daily_reports'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = DailyReport.query.filter_by(company_id=current_user.company_id).count()
    reports = DailyReport.query.filter_by(company_id=current_user.company_id).order_by(DailyReport.date.desc()).offset(offset).limit(per_page).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('daily_reports.html', form=form, reports=reports, pagination=pagination)

@app.route('/insights')
@login_required
def insights():
    status_counts = db.session.query(
        db.func.sum(db.case([(Order.status == 'Pending', 1)], else_=0)),
        db.func.sum(db.case([(Order.status == 'Received', 1)], else_=0)),
        db.func.sum(db.case([(Order.status == 'In Production', 1)], else_=0)),
        db.func.sum(db.case([(Order.status == 'Shipped', 1)], else_=0))
    ).filter_by(company_id=current_user.company_id).first()
    status_counts = [count or 0 for count in status_counts]

    incident_counts = db.session.query(
        db.func.sum(db.case([(Incident.type == 'Incident', 1)], else_=0)),
        db.func.sum(db.case([(Incident.type == 'Near-Miss', 1)], else_=0)),
        db.func.sum(db.case([(Incident.type == 'Hazard', 1)], else_=0))
    ).filter_by(company_id=current_user.company_id).first()
    incident_counts = [count or 0 for count in incident_counts]

    vehicles_on_road = Vehicle.query.filter_by(company_id=current_user.company_id, status='On Road').count()
    vehicles_in_yard = Vehicle.query.filter_by(company_id=current_user.company_id, status='In Yard').count()

    orders_over_time = db.session.query(
        db.func.strftime('%Y-%m-%d', Order.timestamp).label('order_date'),
        db.func.count()
    ).filter_by(company_id=current_user.company_id).group_by('order_date').order_by('order_date').limit(30).all()
    order_dates = [row[0] for row in orders_over_time]
    order_counts = [row[1] for row in orders_over_time]

    severity_counts = db.session.query(
        db.func.sum(db.case([(Incident.severity == 'Low', 1)], else_=0)),
        db.func.sum(db.case([(Incident.severity == 'Medium', 1)], else_=0)),
        db.func.sum(db.case([(Incident.severity == 'High', 1)], else_=0))
    ).filter_by(company_id=current_user.company_id).first()
    severity_counts = [count or 0 for count in severity_counts]

    subcontractor_status_counts = db.session.query(
        db.func.sum(db.case([(Subcontractor.agreement_status == 'Pending', 1)], else_=0)),
        db.func.sum(db.case([(Subcontractor.agreement_status == 'Approved', 1)], else_=0)),
        db.func.sum(db.case([(Subcontractor.agreement_status == 'Rejected', 1)], else_=0))
    ).filter_by(company_id=current_user.company_id).first()
    subcontractor_status_counts = [count or 0 for count in subcontractor_status_counts]

    manpower_trend = DailyReport.query.filter_by(company_id=current_user.company_id).order_by(DailyReport.date).limit(30).all()
    manpower_dates = [report.date.strftime('%Y-%m-%d') for report in manpower_trend]
    manpower_values = [report.manpower for report in manpower_trend]

    total_employees = Employee.query.filter_by(company_id=current_user.company_id).count()
    induction_compliance_rate = (
        (Induction.query.filter_by(company_id=current_user.company_id).distinct(Induction.employee_id).count() / total_employees * 100)
        if total_employees > 0 else 0
    )
    license_compliance_rate = (
        (License.query.filter_by(company_id=current_user.company_id).filter(License.expiry_date >= date.today())
         .distinct(License.employee_id).count() / total_employees * 100)
        if total_employees > 0 else 0
    )

    return render_template('insights.html', status_counts=json.dumps(status_counts), incident_counts=json.dumps(incident_counts),
                           vehicles_on_road=vehicles_on_road, vehicles_in_yard=vehicles_in_yard,
                           order_dates=json.dumps(order_dates), order_counts=json.dumps(order_counts),
                           severity_counts=json.dumps(severity_counts), subcontractor_status_counts=json.dumps(subcontractor_status_counts),
                           manpower_dates=json.dumps(manpower_dates), manpower_values=json.dumps(manpower_values),
                           induction_compliance_rate=induction_compliance_rate, license_compliance_rate=license_compliance_rate)

@app.route('/notifications')
@login_required
def notifications():
    today = date.today()
    expiring_licenses = db.session.query(License, Employee.name).join(Employee).filter(
        License.company_id == current_user.company_id,
        License.expiry_date <= (today + timedelta(days=60)),
        License.expiry_date >= today
    ).order_by(License.expiry_date).all()
    expiring_licenses_data = [
        {
            'license_id': lic[0].license_id,
            'employee_name': lic[1],
            'license_type': lic[0].license_type,
            'expiry_date': lic[0].expiry_date,
            'days_until_expiry': (lic[0].expiry_date - today).days
        } for lic in expiring_licenses
    ]

    expired_licenses = db.session.query(License, Employee.name).join(Employee).filter(
        License.company_id == current_user.company_id,
        License.expiry_date < today
    ).order_by(License.expiry_date).all()
    expired_licenses_data = [
        {
            'license_id': lic[0].license_id,
            'employee_name': lic[1],
            'license_type': lic[0].license_type,
            'expiry_date': lic[0].expiry_date
        } for lic in expired_licenses
    ]

    open_incidents = Incident.query.filter_by(company_id=current_user.company_id, status='Open').order_by(Incident.date.desc()).all()
    equipment_maintenance_due = Equipment.query.filter_by(company_id=current_user.company_id).filter(
        Equipment.next_maintenance_date <= (today + timedelta(days=30))
    ).order_by(Equipment.next_maintenance_date).all()
    low_inventory = Inventory.query.filter_by(company_id=current_user.company_id).filter(
        Inventory.quantity <= Inventory.reorder_point
    ).order_by(Inventory.quantity).all()
    overdue_payments = db.session.query(Payment, Subcontractor.name).join(Subcontractor).filter(
        Payment.company_id == current_user.company_id,
        Payment.due_date < today,
        Payment.status == 'Pending'
    ).order_by(Payment.due_date).all()
    overdue_payments_data = [
        {
            'payment_id': pay[0].payment_id,
            'milestone': pay[0].milestone,
            'amount': pay[0].amount,
            'due_date': pay[0].due_date,
            'company_name': pay[1]
        } for pay in overdue_payments
    ]
    upcoming_audits = SafetyAudit.query.filter_by(company_id=current_user.company_id, status='Scheduled').filter(
        SafetyAudit.audit_date <= (today + timedelta(days=30)),
        SafetyAudit.audit_date >= today
    ).order_by(SafetyAudit.audit_date).all()

    return render_template('notifications.html', expiring_licenses=expiring_licenses_data, expired_licenses=expired_licenses_data,
                           open_incidents=open_incidents, equipment_maintenance_due=equipment_maintenance_due,
                           low_inventory=low_inventory, overdue_payments=overdue_payments_data,
                           upcoming_audits=upcoming_audits)

@app.route('/equipment', methods=['GET', 'POST'])
@login_required
def equipment():
    form = EquipmentForm()
    if form.validate_on_submit():
        equipment = Equipment(
            company_id=current_user.company_id,
            name=form.name.data,
            type=form.type.data,
            status=form.status.data,
            last_maintenance_date=form.last_maintenance_date.data,
            next_maintenance_date=form.next_maintenance_date.data,
            maintenance_notes=form.maintenance_notes.data
        )
        db.session.add(equipment)
        db.session.commit()
        log_action('add_equipment', {'equipment_id': equipment.equipment_id})
        flash('Equipment added successfully!', 'success')
        return redirect(url_for('equipment'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Equipment.query.filter_by(company_id=current_user.company_id).count()
    equipment = Equipment.query.filter_by(company_id=current_user.company_id).order_by(Equipment.next_maintenance_date).offset(offset).limit(per_page).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('equipment.html', form=form, equipment=equipment, pagination=pagination)

@app.route('/edit_equipment/<int:equipment_id>', methods=['GET', 'POST'])
@login_required
def edit_equipment(equipment_id):
    equipment = Equipment.query.filter_by(equipment_id=equipment_id, company_id=current_user.company_id).first()
    if not equipment:
        flash('Equipment not found.', 'danger')
        return redirect(url_for('equipment'))
    form = EquipmentForm(obj=equipment)
    if form.validate_on_submit():
        equipment.name = form.name.data
        equipment.type = form.type.data
        equipment.status = form.status.data
        equipment.last_maintenance_date = form.last_maintenance_date.data
        equipment.next_maintenance_date = form.next_maintenance_date.data
        equipment.maintenance_notes = form.maintenance_notes.data
        db.session.commit()
        log_action('edit_equipment', {'equipment_id': equipment_id})
        flash('Equipment updated successfully!', 'success')
        return redirect(url_for('equipment'))
    return render_template('edit_equipment.html', form=form, equipment=equipment)

@app.route('/delete_equipment/<int:equipment_id>')
@login_required
def delete_equipment(equipment_id):
    equipment = Equipment.query.filter_by(equipment_id=equipment_id, company_id=current_user.company_id).first()
    if not equipment:
        flash('Equipment not found.', 'danger')
        return redirect(url_for('equipment'))
    db.session.delete(equipment)
    db.session.commit()
    log_action('delete_equipment', {'equipment_id': equipment_id})
    flash('Equipment deleted successfully!', 'success')
    return redirect(url_for('equipment'))

@app.route('/weather_forecast')
@login_required
def weather_forecast():
    api_key = os.environ.get('OPENWEATHER_API_KEY')
    if api_key:
        sites = Site.query.filter_by(company_id=current_user.company_id).all()
        for site in sites:
            url = f'http://api.openweathermap.org/data/2.5/forecast?lat={site.latitude}&lon={site.longitude}&appid={api_key}&units=metric'
            try:
                response = requests.get(url, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    for forecast in data['list'][:5]:
                        weather = Weather(
                            company_id=current_user.company_id,
                            site_id=site.site_id,
                            date=datetime.fromtimestamp(forecast['dt']).date(),
                            temperature=forecast['main']['temp'],
                            condition=forecast['weather'][0]['description'],
                            precipitation=int(forecast['pop'] * 100),
                            wind_speed=forecast['wind']['speed'],
                            warning=forecast.get('alerts', [{}])[0].get('description')
                        )
                        db.session.merge(weather)
                    db.session.commit()
            except requests.RequestException as e:
                flash(f'Weather API error for site {site.name}: {e}', 'warning')

    weather_data = {}
    weather_records = Weather.query.filter_by(company_id=current_user.company_id).order_by(Weather.site_id, Weather.date).all()
    for record in weather_records:
        if record.site.name not in weather_data:
            weather_data[record.site.name] = []
        weather_data[record.site.name].append({
            'date': record.date,
            'temp': record.temperature,
            'condition': record.condition,
            'precipitation': record.precipitation,
            'wind_speed': record.wind_speed,
            'warning': record.warning
        })
    return render_template('weather_forecast.html', weather_data=weather_data)

@app.route('/blueprints', methods=['GET', 'POST'])
@login_required
@permission_required('upload_documents')
def blueprints():
    form = BlueprintForm()
    if form.validate_on_submit():
        file = form.file.data
        if not file or not allowed_file(file.filename, file):
            flash('Invalid file type. Allowed: PDF, PNG, JPG.', 'danger')
            return redirect(url_for('blueprints'))
        filename = secure_filename(f"{datetime.now().strftime('%Y%m%d%H%M%S')}_{file.filename}")
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
        file.save(file_path)
        blueprint = Blueprint(
            company_id=current_user.company_id,
            title=form.title.data,
            file_url=f"uploads/{filename}",
            uploaded_by=current_user.username
        )
        db.session.add(blueprint)
        db.session.commit()
        log_action('upload_blueprint', {'blueprint_id': blueprint.blueprint_id})
        flash('Blueprint uploaded successfully!', 'success')
        return redirect(url_for('blueprints'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Blueprint.query.filter_by(company_id=current_user.company_id).count()
    blueprints = Blueprint.query.filter_by(company_id=current_user.company_id).order_by(Blueprint.uploaded_at.desc()).offset(offset).limit(per_page).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('blueprints.html', form=form, blueprints=blueprints, pagination=pagination)

@app.route('/view_blueprint/<int:blueprint_id>', methods=['GET', 'POST'])
@login_required
@permission_required('view_documents')
def view_blueprint(blueprint_id):
    blueprint = Blueprint.query.filter_by(blueprint_id=blueprint_id, company_id=current_user.company_id).first()
    if not blueprint:
        flash('Blueprint not found.', 'danger')
        return redirect(url_for('blueprints'))
    if request.method == 'POST':
        comment_text = request.form.get('comment_text')
        if not comment_text:
            flash('Comment text is required.', 'danger')
            return redirect(url_for('view_blueprint', blueprint_id=blueprint_id))
        comment = BlueprintComment(
            blueprint_id=blueprint_id,
            company_id=current_user.company_id,
            comment_text=comment_text,
            commenter=current_user.username
        )
        db.session.add(comment)
        db.session.commit()
        socketio.emit('new_comment', {'blueprint_id': blueprint_id, 'comment': comment_text})
        log_action('add_blueprint_comment', {'blueprint_id': blueprint_id})
        flash('Comment added successfully!', 'success')
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = BlueprintComment.query.filter_by(blueprint_id=blueprint_id, company_id=current_user.company_id).count()
    comments = BlueprintComment.query.filter_by(blueprint_id=blueprint_id, company_id=current_user.company_id).order_by(BlueprintComment.commented_at.desc()).offset(offset).limit(per_page).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('view_blueprint.html', blueprint=blueprint, comments=comments, pagination=pagination)

@app.route('/reports', methods=['GET', 'POST'])
@login_required
def reports():
    if request.method == 'POST':
        report_type = request.form.get('report_type')
        start_date = request.form.get('start_date')
        end_date = request.form.get('end_date')
        if not start_date or not end_date:
            flash('Start and end dates are required.', 'danger')
            return redirect(url_for('reports'))
        try:
            start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
            end_date = datetime.strptime(end_date, '%Y-%m-%d').date()
            if start_date > end_date:
                flash('Start date must be before end date.', 'danger')
                return redirect(url_for('reports'))
        except ValueError:
            flash('Invalid date format.', 'danger')
            return redirect(url_for('reports'))

        if report_type == 'orders':
            orders = Order.query.filter_by(company_id=current_user.company_id).filter(
                Order.timestamp.between(start_date, end_date)
            ).order_by(Order.timestamp).all()
            buffer = BytesIO()
            pdf = canvas.Canvas(buffer, pagesize=letter)
            pdf.setTitle('Order Report')
            pdf.drawString(100, 750, f'Order Report: {start_date} to {end_date}')
            y = 700
            for order in orders:
                text = (f"Order ID: {order.order_id}, Item: {order.item}, Quantity: {order.quantity}, "
                        f"Site: {order.site.name}, Status: {order.status}, Timestamp: {order.timestamp}")
                pdf.drawString(100, y, text)
                y -= 20
                if y < 50:
                    pdf.showPage()
                    y = 750
            pdf.save()
            buffer.seek(0)
            log_action('generate_report', {'type': 'orders', 'start_date': start_date, 'end_date': end_date})
            return send_file(buffer, as_attachment=True, download_name=f'order_report_{datetime.now().strftime("%Y%m%d%H%M%S")}.pdf', mimetype='application/pdf')
        elif report_type == 'incidents':
            incidents = Incident.query.filter_by(company_id=current_user.company_id).filter(
                Incident.date.between(start_date, end_date)
            ).order_by(Incident.date).all()
            buffer = BytesIO()
            pdf = canvas.Canvas(buffer, pagesize=letter)
            pdf.setTitle('Incident Report')
            pdf.drawString(100, 750, f'Incident Report: {start_date} to {end_date}')
            y = 700
            for incident in incidents:
                text = (f"Incident ID: {incident.incident_id}, Type: {incident.type}, Severity: {incident.severity}, "
                        f"Date: {incident.date}, Reported By: {incident.reported_by}")
                pdf.drawString(100, y, text)
                y -= 20
                if y < 50:
                    pdf.showPage()
                    y = 750
            pdf.save()
            buffer.seek(0)
            log_action('generate_report', {'type': 'incidents', 'start_date': start_date, 'end_date': end_date})
            return send_file(buffer, as_attachment=True, download_name=f'incident_report_{datetime.now().strftime("%Y%m%d%H%M%S")}.pdf', mimetype='application/pdf')
    return render_template('reports.html')

@app.route('/mobile')
@login_required
def mobile():
    weather_data = {}
    weather_records = Weather.query.filter_by(company_id=current_user.company_id).order_by(Weather.site_id, Weather.date).all()
    for record in weather_records:
        if record.site.name not in weather_data:
            weather_data[record.site.name] = []
        weather_data[record.site.name].append({
            'date': record.date,
            'temp': record.temperature,
            'condition': record.condition,
            'precipitation': record.precipitation,
            'wind_speed': record.wind_speed,
            'warning': record.warning
        })
    return render_template('mobile.html', weather_data=weather_data)

@app.route('/mobile/report_incident', methods=['GET', 'POST'])
@login_required
@permission_required('create_incidents')
def mobile_report_incident():
    form = IncidentForm()
    if form.validate_on_submit():
        incident = Incident(
            company_id=current_user.company_id,
            type=form.type.data,
            description=form.description.data,
            location=form.location.data,
            severity=form.severity.data,
            status='Open',
            date=date.today(),
            reported_by=current_user.username
        )
        db.session.add(incident)
        db.session.commit()
        socketio.emit('new_incident', {'incident_id': incident.incident_id, 'type': incident.type})
        log_action('create_incident', {'incident_id': incident.incident_id})
        flash('Incident reported successfully!', 'success')
        return redirect(url_for('mobile'))
    return render_template('mobile_report_incident.html', form=form)

@app.route('/mobile/complete_induction', methods=['GET', 'POST'])
@login_required
def mobile_complete_induction():
    form = InductionForm()
    employee = Employee.query.filter_by(email=f"{current_user.username}@example.com", company_id=current_user.company_id).first()
    if not employee:
        flash('Employee not found.', 'danger')
        return redirect(url_for('mobile'))
    form.employee_id.choices = [(employee.employee_id, employee.name)]
    if form.validate_on_submit():
        induction = Induction(
            employee_id=employee.employee_id,
            company_id=current_user.company_id,
            induction_type=form.induction_type.data,
            completion_date=form.completion_date.data
        )
        db.session.add(induction)
        db.session.commit()
        log_action('complete_induction', {'induction_id': induction.induction_id})
        flash('Induction completed successfully!', 'success')
        return redirect(url_for('mobile'))
    return render_template('mobile_complete_induction.html', form=form)

@app.route('/tasks', methods=['GET', 'POST'])
@login_required
def tasks():
    form = TaskForm()
    employees = Employee.query.filter_by(company_id=current_user.company_id).all()
    projects = Project.query.filter_by(company_id=current_user.company_id).all()
    form.assigned_to.choices = [(e.employee_id, e.name) for e in employees]
    form.project_id.choices = [(p.project_id, p.name) for p in projects]
    if form.validate_on_submit():
        task = Task(
            company_id=current_user.company_id,
            title=form.title.data,
            description=form.description.data,
            status='Not Started',
            due_date=form.due_date.data,
            assigned_to=form.assigned_to.data,
            project_id=form.project_id.data
        )
        db.session.add(task)
        db.session.commit()
        socketio.emit('new_task', {'task_id': task.task_id, 'title': task.title})
        log_action('create_task', {'task_id': task.task_id})
        flash('Task added successfully!', 'success')
        return redirect(url_for('tasks'))
    if request.method == 'POST' and 'task_id' in request.form:
        task_id = request.form.get('task_id', type=int)
        status = request.form.get('status')
        task = Task.query.filter_by(task_id=task_id, company_id=current_user.company_id).first()
        if task:
            task.status = status
            db.session.commit()
            socketio.emit('task_updated', {'task_id': task_id, 'status': status})
            log_action('update_task', {'task_id': task_id, 'status': status})
            flash('Task status updated successfully!', 'success')
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Task.query.filter_by(company_id=current_user.company_id).count()
    tasks = db.session.query(Task, Employee.name).join(Employee).filter(
        Task.company_id == current_user.company_id
    ).order_by(Task.due_date).offset(offset).limit(per_page).all()
    task_data = [
        {
            'task_id': task[0].task_id,
            'title': task[0].title,
            'description': task[0].description,
            'status': task[0].status,
            'due_date': task[0].due_date,
            'assigned_to': task[1],
            'created_at': task[0].created_at,
            'project_id': task[0].project_id
        } for task in tasks
    ]
    gantt_labels = [task['title'] for task in task_data]
    gantt_start_dates = [task['created_at'].strftime('%Y-%m-%d') for task in task_data]
    gantt_due_dates = [task['due_date'].strftime('%Y-%m-%d') for task in task_data]
    gantt_colors = ['#28a745' if task['status'] == 'Completed' else '#ffc107' if task['status'] == 'In Progress' else '#dc3545' for task in task_data]
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('tasks.html', form=form, tasks=task_data, employees=employees,
                           gantt_labels=json.dumps(gantt_labels), gantt_start_dates=json.dumps(gantt_start_dates),
                           gantt_due_dates=json.dumps(gantt_due_dates), gantt_colors=json.dumps(gantt_colors),
                           pagination=pagination)

@app.route('/timesheets', methods=['GET', 'POST'])
@login_required
def timesheets():
    form = TimesheetForm()
    employee = Employee.query.filter_by(email=f"{current_user.username}@example.com", company_id=current_user.company_id).first()
    is_clocked_in = False
    if employee:
        is_clocked_in = Timesheet.query.filter_by(employee_id=employee.employee_id, company_id=current_user.company_id, clock_out=None).first() is not None
    if form.validate_on_submit():
        if not employee:
            flash('Employee not found.', 'danger')
            return redirect(url_for('timesheets'))
        if form.action.data == 'clock_in':
            timesheet = Timesheet(
                employee_id=employee.employee_id,
                company_id=current_user.company_id,
                clock_in=datetime.now(IST),
                break_duration=0,
                status='Pending'
            )
            db.session.add(timesheet)
            db.session.commit()
            log_action('clock_in', {'timesheet_id': timesheet.timesheet_id})
            flash('Clocked in successfully!', 'success')
        elif form.action.data == 'clock_out':
            timesheet = Timesheet.query.filter_by(employee_id=employee.employee_id, company_id=current_user.company_id, clock_out=None).first()
            if timesheet:
                timesheet.clock_out = datetime.now(IST)
                timesheet.break_duration = form.break_duration.data
                timesheet.status = 'Pending'
                db.session.commit()
                log_action('clock_out', {'timesheet_id': timesheet.timesheet_id})
                flash('Clocked out successfully!', 'success')
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Timesheet.query.filter_by(company_id=current_user.company_id).count()
    timesheets = db.session.query(Timesheet, Employee.name).join(Employee).filter(
        Timesheet.company_id == current_user.company_id
    ).order_by(Timesheet.clock_in.desc()).offset(offset).limit(per_page).all()
    timesheet_data = [
        {
            'timesheet_id': ts[0].timesheet_id,
            'employee': ts[1],
            'clock_in': ts[0].clock_in,
            'clock_out': ts[0].clock_out,
            'break_duration': ts[0].break_duration,
            'status': ts[0].status,
            'approved_by': ts[0].approved_by or 'N/A'
        } for ts in timesheets
    ]
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('timesheets.html', form=form, timesheets=timesheet_data, is_clocked_in=is_clocked_in,
                           pagination=pagination)

@app.route('/timesheets/approve/<int:timesheet_id>')
@login_required
@permission_required('manage_users')
def approve_timesheet(timesheet_id):
    timesheet = Timesheet.query.filter_by(timesheet_id=timesheet_id, company_id=current_user.company_id).first()
    if timesheet:
        timesheet.status = 'Approved'
        timesheet.approved_by = current_user.username
        db.session.commit()
        log_action('approve_timesheet', {'timesheet_id': timesheet_id})
        flash('Timesheet approved successfully!', 'success')
    return redirect(url_for('timesheets'))

@app.route('/timesheets/reject/<int:timesheet_id>')
@login_required
@permission_required('manage_users')
def reject_timesheet(timesheet_id):
    timesheet = Timesheet.query.filter_by(timesheet_id=timesheet_id, company_id=current_user.company_id).first()
    if timesheet:
        timesheet.status = 'Rejected'
        timesheet.approved_by = current_user.username
        db.session.commit()
        log_action('reject_timesheet', {'timesheet_id': timesheet_id})
        flash('Timesheet rejected successfully!', 'success')
    return redirect(url_for('timesheets'))

@app.route('/inventory', methods=['GET', 'POST'])
@login_required
def inventory():
    form = InventoryForm()
    if form.validate_on_submit():
        inventory = Inventory(
            company_id=current_user.company_id,
            item_name=form.item_name.data,
            category=form.category.data,
            quantity=form.quantity.data,
            reorder_point=form.reorder_point.data,
            unit_price=form.unit_price.data,
            location=form.location.data
        )
        db.session.add(inventory)
        db.session.commit()
        log_action('add_inventory', {'inventory_id': inventory.inventory_id})
        flash('Inventory item added successfully!', 'success')
        return redirect(url_for('inventory'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Inventory.query.filter_by(company_id=current_user.company_id).count()
    inventory = Inventory.query.filter_by(company_id=current_user.company_id).order_by(Inventory.item_name).offset(offset).limit(per_page).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('inventory.html', form=form, inventory=inventory, pagination=pagination)

@app.route('/edit_inventory/<int:inventory_id>', methods=['GET', 'POST'])
@login_required
def edit_inventory(inventory_id):
    item = Inventory.query.filter_by(inventory_id=inventory_id, company_id=current_user.company_id).first()
    if not item:
        flash('Inventory item not found.', 'danger')
        return redirect(url_for('inventory'))
    form = InventoryForm(obj=item)
    if form.validate_on_submit():
        item.item_name = form.item_name.data
        item.category = form.category.data
        item.quantity = form.quantity.data
        item.reorder_point = form.reorder_point.data
        item.unit_price = form.unit_price.data
        item.location = form.location.data
        db.session.commit()
        log_action('edit_inventory', {'inventory_id': inventory_id})
        flash('Inventory item updated successfully!', 'success')
        return redirect(url_for('inventory'))
    return render_template('edit_inventory.html', form=form, item=item)

@app.route('/delete_inventory/<int:inventory_id>')
@login_required
def delete_inventory(inventory_id):
    item = Inventory.query.filter_by(inventory_id=inventory_id, company_id=current_user.company_id).first()
    if not item:
        flash('Inventory item not found.', 'danger')
        return redirect(url_for('inventory'))
    db.session.delete(item)
    db.session.commit()
    log_action('delete_inventory', {'inventory_id': inventory_id})
    flash('Inventory item deleted successfully!', 'success')
    return redirect(url_for('inventory'))

@app.route('/safety_audits', methods=['GET', 'POST'])
@login_required
def safety_audits():
    form = SafetyAuditForm()
    form.site_id.choices = [(s.site_id, s.name) for s in Site.query.filter_by(company_id=current_user.company_id).all()]
    if form.validate_on_submit():
        audit = SafetyAudit(
            company_id=current_user.company_id,
            site_id=form.site_id.data,
            audit_date=form.audit_date.data,
            description=form.description.data,
            status='Scheduled'
        )
        db.session.add(audit)
        db.session.commit()
        log_action('schedule_audit', {'audit_id': audit.audit_id})
        flash('Safety audit scheduled successfully!', 'success')
        return redirect(url_for('safety_audits'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = SafetyAudit.query.filter_by(company_id=current_user.company_id).count()
    audits = SafetyAudit.query.filter_by(company_id=current_user.company_id).order_by(SafetyAudit.audit_date).offset(offset).limit(per_page).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('safety_audits.html', form=form, audits=audits, pagination=pagination)

@app.route('/safety_audits/update/<int:audit_id>', methods=['GET', 'POST'])
@login_required
def update_safety_audit(audit_id):
    audit = SafetyAudit.query.filter_by(audit_id=audit_id, company_id=current_user.company_id).first()
    if not audit:
        flash('Audit not found.', 'danger')
        return redirect(url_for('safety_audits'))
    form = SafetyAuditForm(obj=audit)
    form.site_id.choices = [(s.site_id, s.name) for s in Site.query.filter_by(company_id=current_user.company_id).all()]
    if form.validate_on_submit():
        audit.site_id = form.site_id.data
        audit.audit_date = form.audit_date.data
        audit.description = form.description.data
        db.session.commit()
        log_action('update_audit', {'audit_id': audit_id})
        flash('Safety audit updated successfully!', 'success')
        return redirect(url_for('safety_audits'))
    return render_template('update_safety_audit.html', form=form, audit=audit)

@app.route('/admin')
@login_required
@permission_required('manage_users')
def admin():
    form = EmployeeForm()
    user_form = RegisterForm()
    role_form = RoleForm()
    companies = Company.query.all()
    users = User.query.filter_by(company_id=current_user.company_id).all()
    employees = Employee.query.filter_by(company_id=current_user.company_id).all()
    roles = Role.query.all()
    role_form.permissions.choices = [(p.permission_id, p.name) for p in Permission.query.all()]
    return render_template('admin.html', form=form, user_form=user_form, role_form=role_form, companies=companies, users=users,
                           employees=employees, roles=roles)

@app.route('/admin/add_company', methods=['GET', 'POST'])
@login_required
@permission_required('manage_users')
def add_company():
    form = AddCompanyForm()
    if form.validate_on_submit():
        if Company.query.filter_by(name=form.company_name.data).first():
            flash('Company name already exists.', 'danger')
            return redirect(url_for('add_company'))
        company = Company(name=form.company_name.data)
        db.session.add(company)
        db.session.commit()
        if User.query.filter_by(username=form.admin_username.data).first():
            flash('Admin username already exists.', 'danger')
            db.session.delete(company)
            db.session.commit()
            return redirect(url_for('add_company'))
        role = Role.query.filter_by(name='Admin').first()
        hashed_password = generate_password_hash(form.admin_password.data)
        admin_user = User(
            company_id=company.company_id,
            username=form.admin_username.data,
            password=hashed_password,
            role_id=role.role_id
        )
        db.session.add(admin_user)
        db.session.commit()
        log_action('add_company', {'company_id': company.company_id, 'admin_username': admin_user.username})
        flash('Company and admin user added successfully!', 'success')
        return redirect(url_for('admin'))
    return render_template('add_company.html', form=form)

@app.route('/admin/add_user', methods=['GET', 'POST'])
@login_required
@permission_required('manage_users')
def add_user():
    form = RegisterForm()
    form.role.choices = [(r.name.lower(), r.name) for r in Role.query.all()]
    if form.validate_on_submit():
        if User.query.filter_by(username=form.username.data).first():
            flash('Username already exists.', 'danger')
            return redirect(url_for('add_user'))
        role = Role.query.filter_by(name=form.role.data.capitalize()).first()
        hashed_password = generate_password_hash(form.password.data)
        user = User(
            company_id=current_user.company_id,
            username=form.username.data,
            password=hashed_password,
            role_id=role.role_id
        )
        db.session.add(user)
        db.session.commit()
        log_action('add_user', {'username': user.username})
        flash('User added successfully!', 'success')
        return redirect(url_for('admin'))
    return render_template('add_user.html', form=form)

@app.route('/admin/add_role', methods=['GET', 'POST'])
@login_required
@permission_required('manage_users')
def add_role():
    form = RoleForm()
    form.permissions.choices = [(p.permission_id, p.name) for p in Permission.query.all()]
    if form.validate_on_submit():
        if Role.query.filter_by(name=form.name.data).first():
            flash('Role name already exists.', 'danger')
            return redirect(url_for('add_role'))
        role = Role(name=form.name.data)
        db.session.add(role)
        db.session.commit()
        for perm_id in form.permissions.data:
            permission = Permission.query.get(perm_id)
            if permission:
                db.session.add(RolePermission(role_id=role.role_id, permission_id=perm_id))
        db.session.commit()
        log_action('add_role', {'role_name': role.name})
        flash('Role added successfully!', 'success')
        return redirect(url_for('admin'))
    return render_template('add_role.html', form=form)

@app.route('/employee_licenses', methods=['GET', 'POST'])
@login_required
@permission_required('manage_users')
def employee_licenses():
    employee_form = EmployeeForm()
    license_form = LicenseForm()
    employees = Employee.query.filter_by(company_id=current_user.company_id).all()
    license_form.employee_id.choices = [(e.employee_id, e.name) for e in employees]
    if request.method == 'POST':
        form_type = request.form.get('form_type')
        if form_type == 'add_employee' and employee_form.validate_on_submit():
            employee = Employee(
                company_id=current_user.company_id,
                name=employee_form.name.data,
                email=employee_form.email.data,
                role=employee_form.role.data,
                phone=employee_form.phone.data
            )
            db.session.add(employee)
            db.session.commit()
            log_action('add_employee', {'employee_id': employee.employee_id})
            flash('Employee added successfully!', 'success')
            return redirect(url_for('employee_licenses'))
        elif form_type == 'add_license' and license_form.validate_on_submit():
            license = License(
                employee_id=license_form.employee_id.data,
                company_id=current_user.company_id,
                license_type=license_form.license_type.data,
                issue_date=license_form.issue_date.data,
                expiry_date=license_form.expiry_date.data
            )
            db.session.add(license)
            db.session.commit()
            log_action('add_license', {'license_id': license.license_id})
            flash('License added successfully!', 'success')
            return redirect(url_for('employee_licenses'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = License.query.filter_by(company_id=current_user.company_id).count()
    licenses = db.session.query(License, Employee.name).join(Employee).filter(
        License.company_id == current_user.company_id
    ).order_by(License.expiry_date).offset(offset).limit(per_page).all()
    license_data = [
        {
            'license_id': lic[0].license_id,
            'employee_name': lic[1],
            'license_type': lic[0].license_type,
            'issue_date': lic[0].issue_date,
            'expiry_date': lic[0].expiry_date,
            'days_until_expiry': (lic[0].expiry_date - date.today()).days,
            'expiry_class': 'text-danger' if (lic[0].expiry_date - date.today()).days <= 30 else 'text-warning' if (lic[0].expiry_date - date.today()).days <= 60 else ''
        } for lic in licenses
    ]
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('employee_licenses.html', employee_form=employee_form, license_form=license_form,
                           licenses=license_data, pagination=pagination)

@app.route('/edit_license/<int:license_id>', methods=['GET', 'POST'])
@login_required
@permission_required('manage_users')
def edit_license(license_id):
    license = License.query.filter_by(license_id=license_id, company_id=current_user.company_id).first()
    if not license:
        flash('License not found.', 'danger')
        return redirect(url_for('employee_licenses'))
    form = LicenseForm(obj=license)
    employees = Employee.query.filter_by(company_id=current_user.company_id).all()
    form.employee_id.choices = [(e.employee_id, e.name) for e in employees]
    if form.validate_on_submit():
        license.employee_id = form.employee_id.data
        license.license_type = form.license_type.data
        license.issue_date = form.issue_date.data
        license.expiry_date = form.expiry_date.data
        db.session.commit()
        log_action('edit_license', {'license_id': license_id})
        flash('License updated successfully!', 'success')
        return redirect(url_for('employee_licenses'))
    return render_template('edit_license.html', form=form, license=license)

@app.route('/delete_license/<int:license_id>')
@login_required
@permission_required('manage_users')
def delete_license(license_id):
    license = License.query.filter_by(license_id=license_id, company_id=current_user.company_id).first()
    if not license:
        flash('License not found.', 'danger')
        return redirect(url_for('employee_licenses'))
    db.session.delete(license)
    db.session.commit()
    log_action('delete_license', {'license_id': license_id})
    flash('License deleted successfully!', 'success')
    return redirect(url_for('employee_licenses'))

@app.route('/edit_employee/<int:employee_id>', methods=['GET', 'POST'])
@login_required
@permission_required('manage_users')
def edit_employee(employee_id):
    employee = Employee.query.filter_by(employee_id=employee_id, company_id=current_user.company_id).first()
    if not employee:
        flash('Employee not found.', 'danger')
        return redirect(url_for('employee_licenses'))
    form = EmployeeForm(obj=employee)
    if form.validate_on_submit():
        employee.name = form.name.data
        employee.email = form.email.data
        employee.role = form.role.data
        employee.phone = form.phone.data
        db.session.commit()
        log_action('edit_employee', {'employee_id': employee_id})
        flash('Employee updated successfully!', 'success')
        return redirect(url_for('employee_licenses'))
    return render_template('edit_employee.html', form=form, employee=employee)

@app.route('/delete_employee/<int:employee_id>')
@login_required
@permission_required('manage_users')
def delete_employee(employee_id):
    employee = Employee.query.filter_by(employee_id=employee_id, company_id=current_user.company_id).first()
    if not employee:
        flash('Employee not found.', 'danger')
        return redirect(url_for('employee_licenses'))
    db.session.delete(employee)
    db.session.commit()
    log_action('delete_employee', {'employee_id': employee_id})
    flash('Employee deleted successfully!', 'success')
    return redirect(url_for('employee_licenses'))

@app.route('/inductions', methods=['GET', 'POST'])
@login_required
def inductions():
    form = InductionForm()
    employees = Employee.query.filter_by(company_id=current_user.company_id).all()
    form.employee_id.choices = [(e.employee_id, e.name) for e in employees]
    if form.validate_on_submit():
        induction = Induction(
            employee_id=form.employee_id.data,
            company_id=current_user.company_id,
            induction_type=form.induction_type.data,
            completion_date=form.completion_date.data
        )
        db.session.add(induction)
        db.session.commit()
        log_action('add_induction', {'induction_id': induction.induction_id})
        flash('Induction added successfully!', 'success')
        return redirect(url_for('inductions'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Induction.query.filter_by(company_id=current_user.company_id).count()
    inductions = db.session.query(Induction, Employee.name).join(Employee).filter(
        Induction.company_id == current_user.company_id
    ).order_by(Induction.completion_date.desc()).offset(offset).limit(per_page).all()
    induction_data = [
        {
            'induction_id': ind[0].induction_id,
            'employee_name': ind[1],
            'induction_type': ind[0].induction_type,
            'completion_date': ind[0].completion_date
        } for ind in inductions
    ]
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('inductions.html', form=form, inductions=induction_data, pagination=pagination)

@app.route('/permits', methods=['GET', 'POST'])
@login_required
def permits():
    form = PermitForm()
    form.site_id.choices = [(s.site_id, s.name) for s in Site.query.filter_by(company_id=current_user.company_id).all()]
    if form.validate_on_submit():
        permit = Permit(
            company_id=current_user.company_id,
            site_id=form.site_id.data,
            permit_type=form.permit_type.data,
            issue_date=form.issue_date.data,
            expiry_date=form.expiry_date.data
        )
        db.session.add(permit)
        db.session.commit()
        log_action('add_permit', {'permit_id': permit.permit_id})
        flash('Permit added successfully!', 'success')
        return redirect(url_for('permits'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Permit.query.filter_by(company_id=current_user.company_id).count()
    permits = Permit.query.filter_by(company_id=current_user.company_id).order_by(Permit.expiry_date).offset(offset).limit(per_page).all()
    permit_data = [
        {
            'permit_id': p.permit_id,
            'site_id': p.site_id,
            'site_name': p.site.name,
            'permit_type': p.permit_type,
            'issue_date': p.issue_date,
            'expiry_date': p.expiry_date,
            'days_until_expiry': (p.expiry_date - date.today()).days
        } for p in permits
    ]
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('permits.html', form=form, permits=permit_data, pagination=pagination)

@app.route('/settings', methods=['GET', 'POST'])
@login_required
def settings():
    form = SettingsForm(username=current_user.username, email=current_user.email or '')
    if form.validate_on_submit():
        if User.query.filter_by(username=form.username.data).filter(User.id != current_user.id).first():
            flash('Username already exists.', 'danger')
            return redirect(url_for('settings'))
        current_user.username = form.username.data
        if form.email.data:
            current_user.email = form.email.data
        if form.password.data:
            current_user.password = generate_password_hash(form.password.data)
        db.session.commit()
        log_action('update_settings', {'username': current_user.username})
        flash('Settings updated successfully!', 'success')
        return redirect(url_for('settings'))
    return render_template('settings.html', form=form)

@app.route('/resource_allocation')
@login_required
def resource_allocation():
    sites = Site.query.filter_by(company_id=current_user.company_id).all()
    resources = []
    for site in sites:
        equipment = Equipment.query.filter_by(company_id=current_user.company_id).filter(
            Equipment.site_id == site.site_id
        ).count()
        labor = Employee.query.join(ProjectAssignment).filter(
            ProjectAssignment.project_id.in_(
                db.session.query(Project.project_id).filter(Project.site_id == site.site_id)
            )
        ).count()
        inventory = Inventory.query.filter_by(company_id=current_user.company_id).filter(
            Inventory.site_id == site.site_id
        ).count()
        resources.append({
            'site': site.name,
            'equipment': f'{equipment} items',
            'labor': f'{labor} workers',
            'materials': f'{inventory} items'
        })
    return render_template('resource_allocation.html', resources=resources)

@app.route('/projects', methods=['GET', 'POST'])
@login_required
@permission_required('manage_projects')
def projects():
    form = ProjectForm()
    if form.validate_on_submit():
        project = Project(
            company_id=current_user.company_id,
            name=form.name.data,
            description=form.description.data,
            start_date=form.start_date.data,
            end_date=form.end_date.data,
            status=form.status.data
        )
        db.session.add(project)
        db.session.commit()
        log_action('create_project', {'project_id': project.project_id})
        flash('Project created successfully!', 'success')
        return redirect(url_for('projects'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Project.query.filter_by(company_id=current_user.company_id).count()
    projects = Project.query.filter_by(company_id=current_user.company_id).order_by(Project.start_date).offset(offset).limit(per_page).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('projects.html', form=form, projects=projects, pagination=pagination)

@app.route('/project/<int:project_id>', methods=['GET', 'POST'])
@login_required
@permission_required('manage_projects')
def project_detail(project_id):
    project = Project.query.filter_by(project_id=project_id, company_id=current_user.company_id).first()
    if not project:
        flash('Project not found.', 'danger')
        return redirect(url_for('projects'))
    milestone_form = MilestoneForm()
    assignment_form = ProjectAssignmentForm()
    assignment_form.employee_id.choices = [(e.employee_id, e.name) for e in Employee.query.filter_by(company_id=current_user.company_id).all()]
    if request.method == 'POST':
        if 'milestone_form' in request.form and milestone_form.validate_on_submit():
            milestone = Milestone(
                project_id=project_id,
                name=milestone_form.name.data,
                due_date=milestone_form.due_date.data,
                status=milestone_form.status.data
            )
            db.session.add(milestone)
            db.session.commit()
            log_action('add_milestone', {'milestone_id': milestone.milestone_id})
            flash('Milestone added successfully!', 'success')
            return redirect(url_for('project_detail', project_id=project_id))
        elif 'assignment_form' in request.form and assignment_form.validate_on_submit():
            assignment = ProjectAssignment(
                project_id=project_id,
                employee_id=assignment_form.employee_id.data,
                role=assignment_form.role.data
            )
            db.session.add(assignment)
            db.session.commit()
            log_action('add_project_assignment', {'assignment_id': assignment.assignment_id})
            flash('Employee assigned successfully!', 'success')
            return redirect(url_for('project_detail', project_id=project_id))
    milestones = Milestone.query.filter_by(project_id=project_id).all()
    assignments = db.session.query(ProjectAssignment, Employee.name).join(Employee).filter(
        ProjectAssignment.project_id == project_id
    ).all()
    assignment_data = [
        {
            'assignment_id': a[0].assignment_id,
            'employee_name': a[1],
            'role': a[0].role
        } for a in assignments
    ]
    return render_template('project_detail.html', project=project, milestone_form=milestone_form,
                           assignment_form=assignment_form, milestones=milestones, assignments=assignment_data)

@app.route('/documents', methods=['GET', 'POST'])
@login_required
@permission_required('upload_documents')
def documents():
    form = DocumentForm()
    if form.validate_on_submit():
        file = form.file.data
        if not file or not allowed_file(file.filename, file):
            flash('Invalid file type. Allowed: PDF, PNG, JPG.', 'danger')
            return redirect(url_for('documents'))
        filename = secure_filename(f"{datetime.now().strftime('%Y%m%d%H%M%S')}_{file.filename}")
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
        file.save(file_path)
        document = Document(
            company_id=current_user.company_id,
            title=form.title.data,
            file_url=f"uploads/{filename}",
            uploaded_by=current_user.username
        )
        db.session.add(document)
        db.session.commit()
        log_action('upload_document', {'document_id': document.document_id})
        flash('Document uploaded successfully!', 'success')
        return redirect(url_for('documents'))
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = Document.query.filter_by(company_id=current_user.company_id).count()
    documents = Document.query.filter_by(company_id=current_user.company_id).order_by(Document.uploaded_at.desc()).offset(offset).limit(per_page).all()
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('documents.html', form=form, documents=documents, pagination=pagination)

@app.route('/document/<int:document_id>')
@login_required
@permission_required('view_documents')
def document_detail(document_id):
    document = Document.query.filter_by(document_id=document_id, company_id=current_user.company_id).first()
    if not document:
        flash('Document not found.', 'danger')
        return redirect(url_for('documents'))
    return render_template('document_detail.html', document=document)

@app.route('/chat', methods=['GET', 'POST'])
@login_required
def chat():
    form = ChatForm()
    if form.validate_on_submit():
        message = {
            'username': current_user.username,
            'text': form.message.data,
            'timestamp': datetime.now(IST).strftime('%Y-%m-%d %H:%M:%S')
        }
        socketio.emit('chat_message', message, namespace='/chat')
        log_action('send_chat_message', {'message': message['text']})
        return redirect(url_for('chat'))
    return render_template('chat.html', form=form)

@app.route('/calendar')
@login_required
def calendar():
    tasks = Task.query.filter_by(company_id=current_user.company_id).all()
    audits = SafetyAudit.query.filter_by(company_id=current_user.company_id).all()
    permits = Permit.query.filter_by(company_id=current_user.company_id).all()
    events = []
    for task in tasks:
        events.append({
            'title': task.title,
            'start': task.due_date.strftime('%Y-%m-%d'),
            'color': '#28a745' if task.status == 'Completed' else '#ffc107' if task.status == 'In Progress' else '#dc3545',
            'url': url_for('tasks')
        })
    for audit in audits:
        events.append({
            'title': f'Audit: {audit.site.name}',
            'start': audit.audit_date.strftime('%Y-%m-%d'),
            'color': '#17a2b8',
            'url': url_for('safety_audits')
        })
    for permit in permits:
        events.append({
            'title': f'Permit: {permit.permit_type}',
            'start': permit.expiry_date.strftime('%Y-%m-%d'),
            'color': '#6c757d',
            'url': url_for('permits')
        })
    return render_template('calendar.html', events=json.dumps(events))

@app.route('/audit_logs')
@login_required
@permission_required('manage_users')
def audit_logs():
    page, per_page, offset = get_page_args(page_parameter='page', per_page_parameter='per_page')
    per_page = 10
    total = AuditLog.query.filter_by(company_id=current_user.company_id).count()
    logs = AuditLog.query.filter_by(company_id=current_user.company_id).order_by(AuditLog.timestamp.desc()).offset(offset).limit(per_page).all()
    log_data = [
        {
            'log_id': log.log_id,
            'user': User.query.get(log.user_id).username if User.query.get(log.user_id) else 'Unknown',
            'action': log.action,
            'details': json.loads(log.details) if log.details else {},
            'timestamp': log.timestamp
        } for log in logs
    ]
    pagination = Pagination(page=page, per_page=per_page, total=total, css_framework='bootstrap5')
    return render_template('audit_logs.html', logs=log_data, pagination=pagination)

@app.route('/set-theme', methods=['POST'])
@login_required
def set_theme():
    data = request.get_json()
    if data and 'theme' in data:
        session['theme'] = data['theme']
        return {'status': 'success'}
    return {'status': 'error'}, 400

@app.route('/favicon.ico')
def favicon():
    try:
        return send_file(os.path.join(app.root_path, 'static', 'favicon.ico'), mimetype='image/vnd.microsoft.icon')
    except FileNotFoundError:
        abort(404)

# API Endpoints
class OrderAPI(Resource):
    @login_required
    @permission_required('view_orders')
    def get(self, order_id=None):
        if order_id:
            order = Order.query.filter_by(order_id=order_id, company_id=current_user.company_id).first()
            if not order:
                return {'error': 'Order not found'}, 404
            return {
                'order_id': order.order_id,
                'item': order.item,
                'quantity': order.quantity,
                'site_id': order.site_id,
                'status': order.status,
                'timestamp': order.timestamp.isoformat()
            }, 200
        orders = Order.query.filter_by(company_id=current_user.company_id).all()
        return [{
            'order_id': o.order_id,
            'item': o.item,
            'quantity': o.quantity,
            'site_id': o.site_id,
            'status': o.status,
            'timestamp': o.timestamp.isoformat()
        } for o in orders], 200

    @login_required
    @permission_required('create_orders')
    def post(self):
        data = request.get_json()
        if not data or 'item' not in data or 'quantity' not in data or 'site_id' not in data:
            return {'error': 'Missing required fields'}, 400
        site = Site.query.filter_by(site_id=data['site_id'], company_id=current_user.company_id).first()
        if not site:
            return {'error': 'Invalid site ID'}, 400
        order = Order(
            company_id=current_user.company_id,
            item=data['item'],
            quantity=data['quantity'],
            site_id=data['site_id'],
            status='Pending',
            comments=data.get('comments')
        )
        db.session.add(order)
        db.session.commit()
        log_action('create_order_api', {'order_id': order.order_id})
        return {'order_id': order.order_id, 'status': 'created'}, 201

api.add_resource(OrderAPI, '/api/orders', '/api/orders/<int:order_id>')

# SocketIO Events
@socketio.on('connect', namespace='/chat')
def chat_connect():
    if current_user.is_authenticated:
        emit('status', {'msg': f'{current_user.username} has connected'}, broadcast=True)

@socketio.on('chat_message', namespace='/chat')
def handle_chat_message(data):
    if current_user.is_authenticated:
        emit('chat_message', data, broadcast=True)

@socketio.on('collaborationUpdate')
def handle_collaboration_update(data):
    emit('collaborationUpdate', data, broadcast=True)

# Context Processor
@app.context_processor
def inject_globals():
    def has_permission(permission_name):
        if not current_user.is_authenticated or not current_user.role:
            return False
        return permission_name in [p.name for p in current_user.role.permissions]
    return {
        'notifications_count': get_notifications_count(current_user.company_id) if current_user.is_authenticated else 0,
        'has_permission': has_permission,
        'current_time': datetime.now(IST)  # Inject current time for all templates
    }

if __name__ == '__main__':
    with app.app_context():
        init_db()
    socketio.run(app, debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))

    (templates folder including all .html files)
    (refer to the original files each time you want to edit one, so you can remain full accuracy in your responses)
    
404 {% extends "base.html" %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 - Page Not Found</title>
    <link href="https://cdn.jsdelivr.net/npm/bootswatch@5.3.0/dist/darkly/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body class="dark-mode">
    <div class="container mt-5">
        <h1>404 - Page Not Found</h1>
        <p>The requested URL was not found on the server.</p>
        <p>If you entered the URL manually, please check your spelling and try again.</p>
        <p><a href="{{ url_for('dashboard') }}" class="btn btn-primary">Return to Dashboard</a></p>
    </div>
    <footer>
        <div class="container-fluid">
            <p>© 2025 Construction Order System</p>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

404.html {% extends "base.html" %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 - Page Not Found</title>
    <link href="https://cdn.jsdelivr.net/npm/bootswatch@5.3.0/dist/darkly/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body class="dark-mode">
    <div class="container mt-5">
        <h1>404 - Page Not Found</h1>
        <p>The requested URL was not found on the server.</p>
        <p>If you entered the URL manually, please check your spelling and try again.</p>
        <p><a href="{{ url_for('dashboard') }}" class="btn btn-primary">Return to Dashboard</a></p>
    </div>
    <footer>
        <div class="container-fluid">
            <p>© 2025 Construction Order System</p>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
add_company.html <!-- templates/add_company.html -->
{% extends "base.html" %}
{% block title %}Add Company{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Add New Company</h3>
    <p>Create a new company and its admin user.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.company_name.label(class="form-label") }}
                        {{ form.company_name(class="form-control") }}
                        {% for error in form.company_name.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.admin_username.label(class="form-label") }}
                        {{ form.admin_username(class="form-control") }}
                        {% for error in form.admin_username.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.admin_password.label(class="form-label") }}
                        {{ form.admin_password(class="form-control") }}
                        {% for error in form.admin_password.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('admin') }}" class="btn btn-secondary">Back to Admin Portal</a>
</div>
{% endblock %}
add_employee.html {% extends "base.html" %}
{% block title %}Add Employee{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Add Employee</h3>
    <p>Add a new employee to your company.</p>
</div>
{% with messages = get_flashed_messages(with_categories=true) %}
    {% if messages %}
        {% for category, message in messages %}
            <div class="alert alert-{{ 'success' if category == 'success' else 'warning' if category == 'warning' else 'danger' }} alert-dismissible fade show" role="alert">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}
    {% endif %}
{% endwith %}
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <form method="POST">
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <input type="text" name="name" id="name" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email (Optional)</label>
                        <input type="email" name="email" id="email" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label for="phone" class="form-label">Phone (Optional)</label>
                        <input type="text" name="phone" id="phone" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label for="role" class="form-label">Role</label>
                        <input type="text" name="role" id="role" class="form-control" required>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Add Employee</button>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('admin') }}" class="btn btn-secondary">Back to Admin Portal</a>
</div>
{% endblock %} 
add_license.html <!-- templates/add_license.html -->
{% extends "base.html" %}
{% block title %}Add License{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Add License</h3>
    <p>Add a new license for an employee.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <input type="hidden" name="form_type" value="add_license">
                    <div class="mb-3">
                        {{ form.employee_id.label(class="form-label") }}
                        {{ form.employee_id(class="form-select") }}
                        {% for error in form.employee_id.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.license_type.label(class="form-label") }}
                        {{ form.license_type(class="form-control") }}
                        {% for error in form.license_type.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.issue_date.label(class="form-label") }}
                        {{ form.issue_date(class="form-control", type="date") }}
                        {% for error in form.issue_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.expiry_date.label(class="form-label") }}
                        {{ form.expiry_date(class="form-control", type="date") }}
                        {% for error in form.expiry_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('employee_licenses') }}" class="btn btn-secondary">Back to Licenses</a>
</div>
{% endblock %}
add_role.html {% extends "base.html" %}
{% block title %}Add Role{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Add Role</h3>
    <p class="text-gray-600 dark:text-gray-400">Create a new role with associated permissions.</p>
</div>
<div class="card">
    <div class="card-body">
        <form method="POST" class="space-y-4">
            {{ form.hidden_tag() }}
            <div>
                {{ form.name.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                {{ form.name(class="form-control mt-1") }}
                {% for error in form.name.errors %}
                    <span class="text-red-500 text-sm">{{ error }}</span>
                {% endfor %}
            </div>
            <div>
                {{ form.permissions.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                <select name="permissions" multiple class="form-control mt-1" size="5">
                    {% for id, name in form.permissions.choices %}
                        <option value="{{ id }}">{{ name }}</option>
                    {% endfor %}
                </select>
                {% for error in form.permissions.errors %}
                    <span class="text-red-500 text-sm">{{ error }}</span>
                {% endfor %}
            </div>
            {{ form.submit(class="btn-primary w-full") }}
        </form>
    </div>
</div>
{% endblock %}
add_user.html <!-- templates/add_user.html -->
{% extends "base.html" %}
{% block title %}Add User{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Add New User</h3>
    <p>Create a new user for your company.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.username.label(class="form-label") }}
                        {{ form.username(class="form-control") }}
                        {% for error in form.username.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.password.label(class="form-label") }}
                        {{ form.password(class="form-control") }}
                        {% for error in form.password.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.role.label(class="form-label") }}
                        {{ form.role(class="form-select") }}
                        {% for error in form.role.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('admin') }}" class="btn btn-secondary">Back to Admin Portal</a>
</div>
{% endblock %} 
admin_portal.html <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Portal - Construction Order System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootswatch@5.3.0/dist/darkly/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body class="dark-mode">
    <div class="loading-spinner" id="loading-spinner">
        <i class="fas fa-spinner fa-spin"></i>
    </div>
    <div class="top-banner">
        <div class="sidebar-spacer"></div>
        <div class="brand-container">
            <div class="brand">
                <span>Construction</span><span>Order</span><span>System</span>
            </div>
        </div>
        <div class="top-right-buttons">
            <button id="theme-toggle" class="btn theme-toggle-btn"><i class="fas fa-sun"></i></button>
            <a href="/logout" class="btn logout-btn">Logout</a>
        </div>
    </div>
    <nav class="sidebar">
        <div class="logo">
            <a href="/">Menu</a>
        </div>
        <div class="user-info">
            Logged in as {{ current_user.username }} (Company ID: {{ current_user.company_id }})
        </div>
        <a href="/" class="nav-link"><i class="fas fa-tachometer-alt"></i>Dashboard</a>
        <a href="/order_form" class="nav-link"><i class="fas fa-file-alt"></i>Order Form</a>
        <a href="/orders" class="nav-link"><i class="fas fa-history"></i>Order History</a>
        <a href="/track_orders" class="nav-link"><i class="fas fa-truck"></i>Track Orders</a>
        <a href="/incidents" class="nav-link"><i class="fas fa-exclamation-triangle"></i>Incidents</a>
        <a href="/subcontractor_portal" class="nav-link"><i class="fas fa-users"></i>Subcontractor Portal</a>
        <a href="/daily_reports" class="nav-link"><i class="fas fa-clipboard-list"></i>Daily Reports</a>
        <a href="/insights" class="nav-link"><i class="fas fa-chart-line"></i>Insights</a>
        <a href="/notifications" class="nav-link"><i class="fas fa-bell"></i>Notifications {% if notifications_count > 0 %}<span class="badge">{{ notifications_count }}</span>{% endif %}</a>
        <a href="/equipment" class="nav-link"><i class="fas fa-tools"></i>Equipment Maintenance</a>
        <a href="/weather_forecast" class="nav-link"><i class="fas fa-cloud-sun"></i>Weather Forecast</a>
        <a href="/subcontractor_payments" class="nav-link"><i class="fas fa-money-check-alt"></i>Subcontractor Payments</a>
        <a href="/blueprints" class="nav-link"><i class="fas fa-drafting-compass"></i>Blueprints</a>
        <a href="/reports" class="nav-link"><i class="fas fa-file-export"></i>Reports</a>
        <a href="/mobile" class="nav-link"><i class="fas fa-mobile-alt"></i>Mobile Dashboard</a>
        <a href="/tasks" class="nav-link"><i class="fas fa-tasks"></i>Tasks</a>
        <a href="/timesheets" class="nav-link"><i class="fas fa-clock"></i>Timesheets</a>
        <a href="/inventory" class="nav-link"><i class="fas fa-warehouse"></i>Inventory</a>
        <a href="/safety_audits" class="nav-link"><i class="fas fa-shield-alt"></i>Safety Audits</a>
        {% if current_user.role == 'admin' %}
            <a href="/admin" class="nav-link active"><i class="fas fa-user-shield"></i>Admin Portal</a>
            <a href="/admin/employee_licenses" class="nav-link" style="padding-left: 40px;"><i class="fas fa-id-card"></i>Employee Licenses</a>
            <a href="/inductions" class="nav-link" style="padding-left: 40px;"><i class="fas fa-book"></i>Inductions</a>
            <a href="/permits" class="nav-link" style="padding-left: 40px;"><i class="fas fa-stamp"></i>Permits</a>
        {% endif %}
        <a href="/settings" class="nav-link"><i class="fas fa-cog"></i>Settings</a>
    </nav>
    <div class="main-content">
        <h2>Admin Portal</h2>
        <div class="card mb-4">
            <div class="card-body">
                <h4>Add Employee</h4>
                <form method="POST">
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <input type="text" name="name" id="name" class="form-control" required placeholder="e.g., John Doe">
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" name="email" id="email" class="form-control" required placeholder="e.g., john.doe@company.com">
                    </div>
                    <div class="mb-3">
                        <label for="role" class="form-label">Role</label>
                        <select name="role" id="role" class="form-select" required>
                            <option value="worker">Worker</option>
                            <option value="manager">Manager</option>
                            <option value="admin">Admin</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Add Employee</button>
                </form>
            </div>
        </div>
        <h3>Employees</h3>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Employee ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Role</th>
                </tr>
            </thead>
            <tbody>
                {% for employee in employees %}
                    <tr>
                        <td>{{ employee.employee_id }}</td>
                        <td>{{ employee.name }}</td>
                        <td>{{ employee.email }}</td>
                        <td>{{ employee.role }}</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    <footer>
        <div class="container-fluid">
            <p>© 2025 Construction Order System</p>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/themeToggle.js') }}"></script>
    <script src="{{ url_for('static', filename='js/loadingSpinner.js') }}"></script>
</body>
</html>
analytics.html {% extends "base.html" %}
{% block title %}Analytics{% endblock %}
{% block breadcrumb %}Analytics{% endblock %}
{% block extra_head %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="{{ url_for('static', filename='js/analytics.js') }}"></script>
{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Analytics</h3>
    <p class="text-gray-600 dark:text-gray-400">View trends and summaries for your operations.</p>
</div>
<div class="row grid grid-cols-1 md:grid-cols-2 gap-4">
    <div class="card">
        <div class="card-body">
            <h4 class="text-xl font-semibold">Order Trends</h4>
            <canvas id="orderTrendChart" data-labels="{{ order_trends.labels | tojson }}" data-values="{{ order_trends.data | tojson }}"></canvas>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <h4 class="text-xl font-semibold">Incident Summary</h4>
            <canvas id="incidentSummaryChart" data-labels="{{ incident_summary.labels | tojson }}" data-values="{{ incident_summary.data | tojson }}"></canvas>
        </div>
    </div>
</div>
{% endblock %}
audit_logs.html {% extends "base.html" %}
{% block title %}Audit Logs{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Audit Logs</h3>
    <p class="text-gray-600 dark:text-gray-400">View user activity logs.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4 class="text-xl font-semibold mb-4">Activity Logs</h4>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Action</th>
                        <th>Details</th>
                        <th>Timestamp</th>
                    </tr>
                </thead>
                <tbody>
                    {% for log in logs %}
                    <tr>
                        <td>{{ log.user | escape }}</td>
                        <td>{{ log.action | escape }}</td>
                        <td>{{ log.details | escape }}</td>
                        <td>{{ log.timestamp }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {{ pagination.links }}
    </div>
</div>
{% endblock %}
base.html <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Site Connect - Construction Management SaaS Platform">
    <meta name="author" content="xAI">
    <link rel="icon" href="{{ url_for('static', filename='favicon.ico') }}" type="image/x-icon">
    <title>{% block title %}{% endblock %} - Site Connect</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
    {% block extra_head %}{% endblock %}
</head>
<body class="{{ 'auth-page' if 'login' in request.path or 'register' in request.path or 'company_login' in request.path else '' }} {{ 'dark-mode' if session.get('theme') == 'dark-mode' else '' }}">
    <div class="loading-spinner" id="loading-spinner" aria-live="polite" aria-label="Loading page content">
        <i class="fas fa-spinner fa-spin"></i>
    </div>
    {% block top_banner %}
    <header class="top-banner" role="banner">
        <div class="brand-container">
            <span class="brand">SITE CONNECT</span>
        </div>
        {% if current_user.is_authenticated %}
        <div class="top-right-buttons" role="navigation">
            <button id="theme-toggle" class="theme-toggle-btn" aria-label="Toggle theme">
                <i class="fas fa-{{ 'moon' if session.get('theme') == 'light-mode' else 'sun' }}"></i>
            </button>
            <a href="{{ url_for('logout') }}" class="btn btn-secondary" aria-label="Logout">Logout</a>
        </div>
        {% endif %}
    </header>
    {% endblock %}
    {% if current_user.is_authenticated and 'login' not in request.path and 'register' not in request.path and 'company_login' not in request.path %}
    <nav class="sidebar {{ 'collapsed' if session.get('sidebar_state') == 'collapsed' else '' }}" role="navigation" aria-label="Main navigation">
        <div class="logo">
            <a href="{{ url_for('dashboard') }}" aria-label="Dashboard menu">Menu</a>
        </div>
        <div class="user-info" aria-live="polite">
            Logged in as {{ current_user.username }} (Company ID: {{ current_user.company_id }})<br>
            <small>Time: {% if current_time is defined %}{{ current_time|strftime('%I:%M %p IST, %d-%m-%Y') }}{% else %}Not available{% endif %}</small>
        </div>
        <a href="{{ url_for('dashboard') }}" class="nav-link {{ 'active' if request.path == url_for('dashboard') }}" aria-current="{{ 'page' if request.path == url_for('dashboard') else 'false' }}"><i class="fas fa-tachometer-alt"></i>Dashboard</a>
        <a href="{{ url_for('order_form') }}" class="nav-link {{ 'active' if request.path == url_for('order_form') }}"><i class="fas fa-file-alt"></i>Order Form</a>
        <a href="{{ url_for('orders') }}" class="nav-link {{ 'active' if request.path == url_for('orders') }}"><i class="fas fa-history"></i>Orders</a>
        <a href="{{ url_for('track_orders') }}" class="nav-link {{ 'active' if request.path == url_for('track_orders') }}"><i class="fas fa-truck"></i>Track Orders</a>
        <a href="{{ url_for('incidents') }}" class="nav-link {{ 'active' if request.path == url_for('incidents') }}"><i class="fas fa-exclamation-triangle"></i>Incidents</a>
        <a href="{{ url_for('subcontractor_portal') }}" class="nav-link {{ 'active' if request.path == url_for('subcontractor_portal') }}"><i class="fas fa-users"></i>Subcontractor Portal</a>
        <a href="{{ url_for('daily_reports') }}" class="nav-link {{ 'active' if request.path == url_for('daily_reports') }}"><i class="fas fa-clipboard-list"></i>Daily Reports</a>
        <a href="{{ url_for('insights') }}" class="nav-link {{ 'active' if request.path == url_for('insights') }}"><i class="fas fa-chart-line"></i>Insights</a>
        <a href="{{ url_for('notifications') }}" class="nav-link {{ 'active' if request.path == url_for('notifications') }}"><i class="fas fa-bell"></i>Notifications {% if notifications_count > 0 %}<span class="badge">{{ notifications_count }}</span>{% endif %}</a>
        <a href="{{ url_for('equipment') }}" class="nav-link {{ 'active' if request.path == url_for('equipment') }}"><i class="fas fa-tools"></i>Equipment</a>
        <a href="{{ url_for('weather_forecast') }}" class="nav-link {{ 'active' if request.path == url_for('weather_forecast') }}"><i class="fas fa-cloud-sun"></i>Weather Forecast</a>
        <a href="{{ url_for('blueprints') }}" class="nav-link {{ 'active' if request.path == url_for('blueprints') }}"><i class="fas fa-drafting-compass"></i>Blueprints</a>
        <a href="{{ url_for('reports') }}" class="nav-link {{ 'active' if request.path == url_for('reports') }}"><i class="fas fa-file-export"></i>Reports</a>
        <a href="{{ url_for('mobile') }}" class="nav-link {{ 'active' if request.path == url_for('mobile') }}"><i class="fas fa-mobile-alt"></i>Mobile Dashboard</a>
        <a href="{{ url_for('tasks') }}" class="nav-link {{ 'active' if request.path == url_for('tasks') }}"><i class="fas fa-tasks"></i>Tasks</a>
        <a href="{{ url_for('timesheets') }}" class="nav-link {{ 'active' if request.path == url_for('timesheets') }}"><i class="fas fa-clock"></i>Timesheets</a>
        <a href="{{ url_for('inventory') }}" class="nav-link {{ 'active' if request.path == url_for('inventory') }}"><i class="fas fa-warehouse"></i>Inventory</a>
        <a href="{{ url_for('safety_audits') }}" class="nav-link {{ 'active' if request.path == url_for('safety_audits') }}"><i class="fas fa-shield-alt"></i>Safety Audits</a>
        <a href="{{ url_for('projects') }}" class="nav-link {{ 'active' if request.path == url_for('projects') }}"><i class="fas fa-project-diagram"></i>Projects</a>
        <a href="{{ url_for('documents') }}" class="nav-link {{ 'active' if request.path == url_for('documents') }}"><i class="fas fa-folder"></i>Documents</a>
        <a href="{{ url_for('chat') }}" class="nav-link {{ 'active' if request.path == url_for('chat') }}"><i class="fas fa-comments"></i>Chat</a>
        <a href="{{ url_for('calendar') }}" class="nav-link {{ 'active' if request.path == url_for('calendar') }}"><i class="fas fa-calendar"></i>Calendar</a>
        {% if has_permission('manage_users') %}
            <a href="{{ url_for('admin') }}" class="nav-link {{ 'active' if request.path == url_for('admin') }}"><i class="fas fa-user-shield"></i>Admin Portal</a>
            <a href="{{ url_for('employee_licenses') }}" class="nav-link pl-10 {{ 'active' if request.path == url_for('employee_licenses') }}"><i class="fas fa-id-card"></i>Employee Licenses</a>
            <a href="{{ url_for('inductions') }}" class="nav-link pl-10 {{ 'active' if request.path == url_for('inductions') }}"><i class="fas fa-book"></i>Inductions</a>
            <a href="{{ url_for('permits') }}" class="nav-link pl-10 {{ 'active' if request.path == url_for('permits') }}"><i class="fas fa-stamp"></i>Permits</a>
            <a href="{{ url_for('audit_logs') }}" class="nav-link pl-10 {{ 'active' if request.path == url_for('audit_logs') }}"><i class="fas fa-history"></i>Audit Logs</a>
        {% endif %}
        <a href="{{ url_for('settings') }}" class="nav-link {{ 'active' if request.path == url_for('settings') }}"><i class="fas fa-cog"></i>Settings</a>
    </nav>
    {% endif %}
    <main class="main-content {{ 'no-sidebar' if not current_user.is_authenticated or 'login' in request.path or 'register' in request.path or 'company_login' in request.path else '' }}" role="main">
        <div class="container">
            {% block breadcrumb %}
            {% if request.path not in ['/login', '/register', '/company_login'] %}
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ url_for('dashboard') }}">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">{% block breadcrumb_title %}{% endblock %}</li>
                </ol>
            </nav>
            {% endif %}
            {% endblock %}
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-{{ 'success' if category == 'success' else 'warning' if category == 'warning' else 'danger' }} alert-dismissible fade show" role="alert" aria-live="polite">
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            {% block content %}{% endblock %}
        </div>
    </main>
    {% if current_user.is_authenticated %}
    <div class="chat-widget" onclick="toggleChat()" aria-label="Open support chat">
        <i class="fas fa-comment-alt"></i> Support Chat
    </div>
    <div class="chat-modal" id="chat-modal" role="dialog" aria-labelledby="chat-modal-title">
        <div class="chat-modal-header">
            <span id="chat-modal-title">Support Chat</span>
            <button onclick="toggleChat()" aria-label="Close chat">X</button>
        </div>
        <div class="chat-modal-body">
            <p>Support is currently offline.</p>
        </div>
        <div class="chat-modal-footer">
            <input type="text" placeholder="Type a message..." disabled aria-label="Chat input">
        </div>
    </div>
    {% endif %}
    <footer class="footer" role="contentinfo">
        <div class="container">
            <p>© {{ current_time|strftime('%Y') if current_time is defined else '2025' }} Site Connect</p>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="{{ url_for('static', filename='js/themeToggle.js') }}"></script>
    <script src="{{ url_for('static', filename='js/loadingSpinner.js') }}"></script>
    <script src="{{ url_for('static', filename='js/sidebarToggle.js') }}"></script>
    <script src="{{ url_for('static', filename='js/dashboard.js') }}"></script>
    <script>
        function toggleChat() {
            const chatModal = document.getElementById('chat-modal');
            chatModal.classList.toggle('active');
        }
        // Dynamic time update
        function updateTime() {
            const now = new Date().toLocaleString('en-US', { timeZone: 'Asia/Kolkata', hour12: true, hour: 'numeric', minute: 'numeric' });
            const date = new Date().toLocaleDateString('en-GB');
            const timeElement = document.querySelector('.user-info small');
            if (timeElement) {
                timeElement.textContent = `Time: ${now} IST, ${date}`;
            }
            const dashboardTimeElement = document.querySelector('.dashboard-time');
            if (dashboardTimeElement) {
                dashboardTimeElement.textContent = `${now} IST, ${date}`;
            }
        }
        setInterval(updateTime, 60000); // Update every minute
        updateTime(); // Initial call
    </script>
</body>
</html>
blueprints.html {% extends "base.html" %}
{% block title %}Blueprints{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Blueprints</h3>
    <p>Upload and manage blueprints.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Upload Blueprint</h4>
                <form method="POST" enctype="multipart/form-data">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.title.label(class="form-label") }}
                        {{ form.title(class="form-control") }}
                        {% for error in form.title.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.file.label(class="form-label") }}
                        {{ form.file(class="form-control") }}
                        {% for error in form.file.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>Blueprints</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Filename</th>
                                <th>Uploaded At</th>
                                <th>Uploaded By</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for blueprint in blueprints %}
                            <tr>
                                <td>{{ blueprint.title }}</td>
                                <td>{{ blueprint.file_url.split('/')[-1] }}</td>
                                <td>{{ blueprint.uploaded_at }}</td>
                                <td>{{ blueprint.uploaded_by }}</td>
                                <td>
                                    <a href="{{ url_for('view_blueprint', blueprint_id=blueprint.blueprint_id) }}" class="btn btn-primary">View</a>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}  
calendar.html {% extends "base.html" %}
{% block title %}Calendar{% endblock %}
{% block extra_head %}
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const calendarEl = document.getElementById('calendar');
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            events: {{ events | safe }},
            eventClick: function(info) {
                if (info.event.url) {
                    window.location.href = info.event.url;
                }
            }
        });
        calendar.render();
    });
</script>
{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Calendar</h3>
    <p class="text-gray-600 dark:text-gray-400">View tasks, audits, and permits on a calendar.</p>
</div>
<div class="card">
    <div class="card-body">
        <div id="calendar"></div>
    </div>
</div>
{% endblock %}
chat.html {% extends "base.html" %}
{% block title %}Chat{% endblock %}
{% block extra_head %}
<script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
<script>
    const socket = io('/chat');
    socket.on('chat_message', function(data) {
        const chatMessages = document.getElementById('chat-messages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'p-2 border-b border-gray-200 dark:border-gray-700';
        messageDiv.innerHTML = `<strong>${data.username}</strong> (${data.timestamp}): ${data.text}`;
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    });
</script>
{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Team Chat</h3>
    <p class="text-gray-600 dark:text-gray-400">Collaborate with your team in real-time.</p>
</div>
<div class="card">
    <div class="card-body">
        <div id="chat-messages" class="h-64 overflow-y-auto mb-4"></div>
        <form method="POST" class="space-y-4">
            {{ form.hidden_tag() }}
            <div>
                {{ form.message.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                {{ form.message(class="form-control mt-1") }}
                {% for error in form.message.errors %}
                    <span class="text-red-500 text-sm">{{ error }}</span>
                {% endfor %}
            </div>
            {{ form.submit(class="btn-primary w-full") }}
        </form>
    </div>
</div>
{% endblock %}
company_login.html <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Company Login - SiteConnect</title>
    <link href="https://cdn.jsdelivr.net/npm/bootswatch@5.3.0/dist/darkly/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <div class="loading-spinner" id="loading-spinner">
        <i class="fas fa-spinner fa-spin"></i>
    </div>
    <div class="login-container">
        <div class="login-box">
            <h2><span class="site-gradient">Site</span><span class="connect-gradient">Connect</span></h2>
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-{{ 'success' if category == 'success' else 'warning' if category == 'warning' else 'danger' }} alert-dismissible fade show" role="alert">
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            <form method="POST">
                <div class="mb-3">
                    <label for="company_name" class="form-label">Company Name</label>
                    <input type="text" name="company_name" id="company_name" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <input type="text" name="username" id="username" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" name="password" id="password" class="form-control" required>
                </div>
                <button type="submit" class="btn btn-primary">Login</button>
            </form>
            <div class="mt-3 text-center">
                <a href="{{ url_for('login') }}" class="text-decoration-none" style="color: var(--accent-gold);">User Login</a>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/loadingSpinner.js') }}"></script>
    <script src="{{ url_for('static', filename='js/themeToggle.js') }}"></script>
</body>
</html>
daily_reports.html {% extends "base.html" %}
{% block title %}Daily Reports{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Daily Reports</h3>
    <p>Submit and view daily site reports.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Submit Daily Report</h4>
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.site_id.label(class="form-label") }}
                        {{ form.site_id(class="form-control") }}
                        {% for error in form.site_id.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.date.label(class="form-label") }}
                        {{ form.date(class="form-control", type="date") }}
                        {% for error in form.date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.manpower.label(class="form-label") }}
                        {{ form.manpower(class="form-control") }}
                        {% for error in form.manpower.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.safety_activities.label(class="form-label") }}
                        {{ form.safety_activities(class="form-control") }}
                        {% for error in form.safety_activities.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.progress_notes.label(class="form-label") }}
                        {{ form.progress_notes(class="form-control") }}
                        {% for error in form.progress_notes.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>Recent Reports</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Site ID</th>
                                <th>Date</th>
                                <th>Manpower</th>
                                <th>Safety Activities</th>
                                <th>Progress Notes</th>
                                <th>Reported By</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for report in reports %}
                            <tr>
                                <td>{{ report.site_id }}</td>
                                <td>{{ report.date }}</td>
                                <td>{{ report.manpower }}</td>
                                <td>{{ report.safety_activities or 'N/A' }}</td>
                                <td>{{ report.progress_notes or 'N/A' }}</td>
                                <td>{{ report.reported_by }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
dashboard.html {% extends "base.html" %}
{% block title %}Dashboard{% endblock %}
{% block breadcrumb_title %}Dashboard{% endblock %}
{% block extra_head %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css" />
<script src="{{ url_for('static', filename='js/dashboard.js') }}"></script>
{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="mb-2">Welcome, {{ current_user.username }}!</h3>
    <p class="text-muted">Dashboard Overview as of <span class="dashboard-time"></span> IST</p>
    <button class="btn btn-primary mt-3" onclick="refreshDashboard()">Refresh Data</button>
</div>
<div class="row g-4">
    <!-- Order Status Card -->
    <div class="col-md-4">
        <div class="dashboard-card">
            <h4>Order Status</h4>
            <div class="chart-container">
                <canvas id="orderStatusChart"></canvas>
            </div>
            <p class="text-muted mt-2">Total Orders: 45</p>
        </div>
    </div>
    <!-- Incident Overview Card -->
    <div class="col-md-4">
        <div class="dashboard-card">
            <h4>Incident Overview</h4>
            <div class="chart-container">
                <canvas id="incidentTypesChart"></canvas>
            </div>
            <p class="text-muted mt-2">Open Incidents: 15</p>
        </div>
    </div>
    <!-- Task Progress Card -->
    <div class="col-md-4">
        <div class="dashboard-card">
            <h4>Task Progress</h4>
            <div class="chart-container">
                <canvas id="taskProgressChart"></canvas>
            </div>
            <p class="text-muted mt-2">Tasks Completed: 30</p>
        </div>
    </div>
    <!-- Project Timeline Card -->
    <div class="col-md-4">
        <div class="dashboard-card">
            <h4>Project Timeline</h4>
            <ul class="list-unstyled">
                <li><span class="badge bg-success">Office Building</span> - 80% Complete</li>
                <li><span class="badge bg-warning">Warehouse</span> - Not Started</li>
                <li><span class="badge bg-info">Bridge</span> - 30% Planned</li>
            </ul>
        </div>
    </div>
    <!-- Weather Update Card -->
    <div class="col-md-4">
        <div class="dashboard-card">
            <h4>Weather Update</h4>
            <p>Site A: 28°C, Sunny</p>
            <p>Site B: 22°C, Cloudy</p>
            <p class="text-muted mt-2">Updated: 07:00 PM IST</p>
        </div>
    </div>
    <!-- Recent Orders Card -->
    <div class="col-md-4">
        <div class="dashboard-card">
            <h4>Recent Orders</h4>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Item</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>001</td>
                        <td>Concrete Mix</td>
                        <td><span class="badge bg-success">Shipped</span></td>
                    </tr>
                    <tr>
                        <td>002</td>
                        <td>Steel Beams</td>
                        <td><span class="badge bg-warning">In Production</span></td>
                    </tr>
                    <tr>
                        <td>003</td>
                        <td>Tools Kit</td>
                        <td><span class="badge bg-secondary">Pending</span></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <!-- Site Map Card -->
    <div class="col-12">
        <div class="dashboard-card">
            <h4>Site Map</h4>
            <div id="site-map" style="height: 400px;"></div>
        </div>
    </div>
</div>
{% endblock %}
document_detail.html {% extends "base.html" %}
{% block title %}Document: {{ document.title }}{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Document: {{ document.title }}</h3>
    <p class="text-gray-600 dark:text-gray-400">View document details.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4 class="text-xl font-semibold mb-4">Document Details</h4>
        <p><strong>Title:</strong> {{ document.title }}</p>
        <p><strong>Version:</strong> {{ document.version }}</p>
        <p><strong>Uploaded By:</strong> {{ document.uploaded_by }}</p>
        <p><strong>Uploaded At:</strong> {{ document.uploaded_at }}</p>
        <a href="{{ url_for('static', filename=document.file_url) }}" class="btn-primary mt-4" target="_blank">View File</a>
    </div>
</div>
<div class="mt-4">
    <a href="{{ url_for('documents') }}" class="btn-primary">Back to Documents</a>
</div>
{% endblock %}
documents.html {% extends "base.html" %}
{% block title %}Documents{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Documents</h3>
    <p class="text-gray-600 dark:text-gray-400">Manage your documents and contracts.</p>
</div>
<div class="row grid grid-cols-1 md:grid-cols-2 gap-4">
    <div class="card">
        <div class="card-body">
            <h4 class="text-xl font-semibold mb-4">Upload Document</h4>
            <form method="POST" enctype="multipart/form-data" class="space-y-4">
                {{ form.hidden_tag() }}
                <div>
                    {{ form.title.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ form.title(class="form-control mt-1") }}
                    {% for error in form.title.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                <div>
                    {{ form.file.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ form.file(class="form-control mt-1") }}
                    {% for error in form.file.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                {{ form.submit(class="btn-primary w-full") }}
            </form>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <h4 class="text-xl font-semibold mb-4">Document List</h4>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Version</th>
                            <th>Uploaded By</th>
                            <th>Uploaded At</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for document in documents %}
                        <tr>
                            <td>{{ document.title }}</td>
                            <td>{{ document.version }}</td>
                            <td>{{ document.uploaded_by }}</td>
                            <td>{{ document.uploaded_at }}</td>
                            <td>
                                <a href="{{ url_for('document_detail', document_id=document.document_id) }}" class="btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {{ pagination.links }}
        </div>
    </div>
</div>
{% endblock %}
edit_employee.html {% extends "base.html" %}
{% block title %}Edit Employee{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Edit Employee #{{ employee.employee_id }}</h3>
    <p>Update employee details.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.name.label(class="form-label") }}
                        {{ form.name(class="form-control", value=employee.name) }}
                        {% for error in form.name.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.email.label(class="form-label") }}
                        {{ form.email(class="form-control", value=employee.email) }}
                        {% for error in form.email.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.phone.label(class="form-label") }}
                        {{ form.phone(class="form-control", value=employee.phone) }}
                        {% for error in form.phone.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.role.label(class="form-label") }}
                        {{ form.role(class="form-control", value=employee.role) }}
                        {% for error in form.role.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('admin') }}" class="btn btn-secondary">Back to Admin Portal</a>
</div>
{% endblock %} 
edit_equipment.html <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Equipment - Construction Order System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootswatch@5.3.0/dist/darkly/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <div class="top-banner">
        <div class="brand">
            <span>Construction</span><span>Order</span><span>System</span>
        </div>
        <a href="/logout" class="btn logout-btn">Logout</a>
    </div>
    <nav class="sidebar">
        <div class="logo">
            <a href="/">Menu</a>
        </div>
        <div class="user-info">
            Logged in as {{ current_user.username }} (Company ID: {{ current_user.company_id }})
        </div>
        <a href="/" class="nav-link"><i class="fas fa-tachometer-alt"></i>Dashboard</a>
        <a href="/order_form" class="nav-link"><i class="fas fa-file-alt"></i>Order Form</a>
        <a href="/orders" class="nav-link"><i class="fas fa-history"></i>Order History</a>
        <a href="/track_orders" class="nav-link"><i class="fas fa-truck"></i>Track Orders</a>
        <a href="/incidents" class="nav-link"><i class="fas fa-exclamation-triangle"></i>Incidents</a>
        <a href="/subcontractor_portal" class="nav-link"><i class="fas fa-users"></i>Subcontractor Portal</a>
        <a href="/daily_reports" class="nav-link"><i class="fas fa-clipboard-list"></i>Daily Reports</a>
        <a href="/insights" class="nav-link"><i class="fas fa-chart-line"></i>Insights</a>
        <a href="/notifications" class="nav-link"><i class="fas fa-bell"></i>Notifications {% if notifications_count > 0 %}<span class="badge">{{ notifications_count }}</span>{% endif %}</a>
        <a href="/equipment" class="nav-link active"><i class="fas fa-tools"></i>Equipment Maintenance</a>
        <a href="/weather_forecast" class="nav-link"><i class="fas fa-cloud-sun"></i>Weather Forecast</a>
        <a href="/subcontractor_payments" class="nav-link"><i class="fas fa-money-check-alt"></i>Subcontractor Payments</a>
        <a href="/blueprints" class="nav-link"><i class="fas fa-drafting-compass"></i>Blueprints</a>
        <a href="/reports" class="nav-link"><i class="fas fa-file-export"></i>Reports</a>
        <a href="/mobile" class="nav-link"><i class="fas fa-mobile-alt"></i>Mobile Dashboard</a>
        <a href="/tasks" class="nav-link"><i class="fas fa-tasks"></i>Tasks</a>
        <a href="/timesheets" class="nav-link"><i class="fas fa-clock"></i>Timesheets</a>
        <a href="/inventory" class="nav-link"><i class="fas fa-warehouse"></i>Inventory</a>
        <a href="/safety_audits" class="nav-link"><i class="fas fa-shield-alt"></i>Safety Audits</a>
        {% if current_user.role == 'admin' %}
            <a href="/admin" class="nav-link"><i class="fas fa-user-shield"></i>Admin Portal</a>
            <a href="/admin/employee_licenses" class="nav-link" style="padding-left: 40px;"><i class="fas fa-id-card"></i>Employee Licenses</a>
            <a href="/inductions" class="nav-link" style="padding-left: 40px;"><i class="fas fa-book"></i>Inductions</a>
            <a href="/permits" class="nav-link" style="padding-left: 40px;"><i class="fas fa-stamp"></i>Permits</a>
        {% endif %}
        <a href="/settings" class="nav-link"><i class="fas fa-cog"></i>Settings</a>
    </nav>
    <div class="main-content">
        <h2>Edit Equipment</h2>

        <div class="card">
            <div class="card-body">
                <form method="POST">
                    <div class="mb-3">
                        <label for="name" class="form-label">Equipment Name</label>
                        <input type="text" name="name" id="name" class="form-control" value="{{ equipment.name }}" required>
                    </div>
                    <div class="mb-3">
                        <label for="type" class="form-label">Type</label>
                        <select name="type" id="type" class="form-select" required>
                            <option value="Heavy Machinery" {% if equipment.type == 'Heavy Machinery' %}selected{% endif %}>Heavy Machinery</option>
                            <option value="Tool" {% if equipment.type == 'Tool' %}selected{% endif %}>Tool</option>
                            <option value="Safety Gear" {% if equipment.type == 'Safety Gear' %}selected{% endif %}>Safety Gear</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <select name="status" id="status" class="form-select" required>
                            <option value="Available" {% if equipment.status == 'Available' %}selected{% endif %}>Available</option>
                            <option value="Under Maintenance" {% if equipment.status == 'Under Maintenance' %}selected{% endif %}>Under Maintenance</option>
                            <option value="Out of Service" {% if equipment.status == 'Out of Service' %}selected{% endif %}>Out of Service</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="last_maintenance_date" class="form-label">Last Maintenance Date (YYYY-MM-DD)</label>
                        <input type="date" name="last_maintenance_date" id="last_maintenance_date" class="form-control" value="{{ equipment.last_maintenance_date }}">
                    </div>
                    <div class="mb-3">
                        <label for="next_maintenance_date" class="form-label">Next Maintenance Date (YYYY-MM-DD)</label>
                        <input type="date" name="next_maintenance_date" id="next_maintenance_date" class="form-control" value="{{ equipment.next_maintenance_date }}">
                    </div>
                    <div class="mb-3">
                        <label for="maintenance_notes" class="form-label">Maintenance Notes</label>
                        <textarea name="maintenance_notes" id="maintenance_notes" class="form-control" rows="3">{{ equipment.maintenance_notes }}</textarea>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Update Equipment</button>
                </form>
            </div>
        </div>
    </div>
    <footer>
        <div class="container-fluid">
            <p>© 2025 Construction Order System</p>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
edit_inventory.html <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Inventory Item - Construction Order System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootswatch@5.3.0/dist/darkly/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <div class="top-banner">
        <div class="brand">
            <span>Construction</span><span>Order</span><span>System</span>
        </div>
        <a href="/logout" class="btn logout-btn">Logout</a>
    </div>
    <nav class="sidebar">
        <div class="logo">
            <a href="/">Menu</a>
        </div>
        <div class="user-info">
            Logged in as {{ current_user.username }} (Company ID: {{ current_user.company_id }})
        </div>
        <a href="/" class="nav-link"><i class="fas fa-tachometer-alt"></i>Dashboard</a>
        <a href="/order_form" class="nav-link"><i class="fas fa-file-alt"></i>Order Form</a>
        <a href="/orders" class="nav-link"><i class="fas fa-history"></i>Order History</a>
        <a href="/track_orders" class="nav-link"><i class="fas fa-truck"></i>Track Orders</a>
        <a href="/incidents" class="nav-link"><i class="fas fa-exclamation-triangle"></i>Incidents</a>
        <a href="/subcontractor_portal" class="nav-link"><i class="fas fa-users"></i>Subcontractor Portal</a>
        <a href="/daily_reports" class="nav-link"><i class="fas fa-clipboard-list"></i>Daily Reports</a>
        <a href="/insights" class="nav-link"><i class="fas fa-chart-line"></i>Insights</a>
        <a href="/notifications" class="nav-link"><i class="fas fa-bell"></i>Notifications {% if notifications_count > 0 %}<span class="badge">{{ notifications_count }}</span>{% endif %}</a>
        <a href="/equipment" class="nav-link"><i class="fas fa-tools"></i>Equipment Maintenance</a>
        <a href="/weather_forecast" class="nav-link"><i class="fas fa-cloud-sun"></i>Weather Forecast</a>
        <a href="/subcontractor_payments" class="nav-link"><i class="fas fa-money-check-alt"></i>Subcontractor Payments</a>
        <a href="/blueprints" class="nav-link"><i class="fas fa-drafting-compass"></i>Blueprints</a>
        <a href="/reports" class="nav-link"><i class="fas fa-file-export"></i>Reports</a>
        <a href="/mobile" class="nav-link"><i class="fas fa-mobile-alt"></i>Mobile Dashboard</a>
        <a href="/tasks" class="nav-link"><i class="fas fa-tasks"></i>Tasks</a>
        <a href="/timesheets" class="nav-link"><i class="fas fa-clock"></i>Timesheets</a>
        <a href="/inventory" class="nav-link active"><i class="fas fa-warehouse"></i>Inventory</a>
        <a href="/safety_audits" class="nav-link"><i class="fas fa-shield-alt"></i>Safety Audits</a>
        {% if current_user.role == 'admin' %}
            <a href="/admin" class="nav-link"><i class="fas fa-user-shield"></i>Admin Portal</a>
            <a href="/admin/employee_licenses" class="nav-link" style="padding-left: 40px;"><i class="fas fa-id-card"></i>Employee Licenses</a>
            <a href="/inductions" class="nav-link" style="padding-left: 40px;"><i class="fas fa-book"></i>Inductions</a>
            <a href="/permits" class="nav-link" style="padding-left: 40px;"><i class="fas fa-stamp"></i>Permits</a>
        {% endif %}
        <a href="/settings" class="nav-link"><i class="fas fa-cog"></i>Settings</a>
    </nav>
    <div class="main-content">
        <h2>Edit Inventory Item</h2>

        <div class="card">
            <div class="card-body">
                <form method="POST">
                    <div class="mb-3">
                        <label for="item_name" class="form-label">Item Name</label>
                        <input type="text" name="item_name" id="item_name" class="form-control" value="{{ item.item_name }}" required>
                    </div>
                    <div class="mb-3">
                        <label for="category" class="form-label">Category</label>
                        <select name="category" id="category" class="form-select" required>
                            <option value="Materials" {% if item.category == 'Materials' %}selected{% endif %}>Materials</option>
                            <option value="Tools" {% if item.category == 'Tools' %}selected{% endif %}>Tools</option>
                            <option value="Equipment" {% if item.category == 'Equipment' %}selected{% endif %}>Equipment</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input type="number" name="quantity" id="quantity" class="form-control" value="{{ item.quantity }}" required>
                    </div>
                    <div class="mb-3">
                        <label for="reorder_point" class="form-label">Reorder Point</label>
                        <input type="number" name="reorder_point" id="reorder_point" class="form-control" value="{{ item.reorder_point }}">
                    </div>
                    <div class="mb-3">
                        <label for="unit_price" class="form-label">Unit Price (Optional)</label>
                        <input type="number" step="0.01" name="unit_price" id="unit_price" class="form-control" value="{{ item.unit_price if item.unit_price else '' }}">
                    </div>
                    <div class="mb-3">
                        <label for="location" class="form-label">Location (Optional)</label>
                        <input type="text" name="location" id="location" class="form-control" value="{{ item.location if item.location else '' }}">
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Update Item</button>
                </form>
            </div>
        </div>
    </div>
    <footer>
        <div class="container-fluid">
            <p>© 2025 Construction Order System</p>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
edit_license.html {% extends "base.html" %}
{% block title %}Edit License{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Edit License #{{ license.license_id }}</h3>
    <p>Update license details.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.employee_id.label(class="form-label") }}
                        {{ form.employee_id(class="form-select") }}
                        {% for error in form.employee_id.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.license_type.label(class="form-label") }}
                        {{ form.license_type(class="form-control") }}
                        {% for error in form.license_type.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.issue_date.label(class="form-label") }}
                        {{ form.issue_date(class="form-control", type="date") }}
                        {% for error in form.issue_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.expiry_date.label(class="form-label") }}
                        {{ form.expiry_date(class="form-control", type="date") }}
                        {% for error in form.expiry_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('employee_licenses') }}" class="btn btn-secondary">Back to Licenses</a>
</div>
{% endblock %}
edit_order.html {% extends "base.html" %}
{% block title %}Edit Order{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Edit Order #{{ order.order_id }}</h3>
    <p>Update the details for this order.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.item.label(class="form-label") }}
                        {{ form.item(class="form-control") }}
                        {% for error in form.item.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.quantity.label(class="form-label") }}
                        {{ form.quantity(class="form-control", type="number") }}
                        {% for error in form.quantity.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.site_id.label(class="form-label") }}
                        {{ form.site_id(class="form-control") }}
                        {% for error in form.site_id.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.comments.label(class="form-label") }}
                        {{ form.comments(class="form-control") }}
                        {% for error in form.comments.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('orders') }}" class="btn btn-secondary">Back to Orders</a>
</div>
{% endblock %}
edit_project.html {% extends "base.html" %}
{% block title %}Edit Project{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Edit Project #{{ project.project_id }}</h3>
    <p>Update project details.</p>
</div>
<div class="card">
    <div class="card-body">
        <form method="POST">
            {{ form.hidden_tag() }}
            <div class="mb-3">
                {{ form.name.label(class="form-label") }}
                {{ form.name(class="form-control") }}
                {% for error in form.name.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.description.label(class="form-label") }}
                {{ form.description(class="form-control") }}
                {% for error in form.description.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.start_date.label(class="form-label") }}
                {{ form.start_date(class="form-control", type="date") }}
                {% for error in form.start_date.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.end_date.label(class="form-label") }}
                {{ form.end_date(class="form-control", type="date") }}
                {% for error in form.end_date.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.status.label(class="form-label") }}
                {{ form.status(class="form-select") }}
                {% for error in form.status.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.budget.label(class="form-label") }}
                {{ form.budget(class="form-control", type="number") }}
                {% for error in form.budget.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            {{ form.submit(class="btn btn-primary w-100") }}
        </form>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('projects') }}" class="btn btn-secondary">Back to Projects</a>
</div>
{% endblock %}
employee_licenses.html {% extends "base.html" %}
{% block title %}Employee Licenses{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Employee Licenses</h3>
    <p>Manage employee licenses and add new employees.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Add Employee</h4>
                <form method="POST">
                    {{ employee_form.hidden_tag() }}
                    <input type="hidden" name="form_type" value="add_employee">
                    <div class="mb-3">
                        {{ employee_form.name.label(class="form-label") }}
                        {{ employee_form.name(class="form-control") }}
                        {% for error in employee_form.name.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ employee_form.email.label(class="form-label") }}
                        {{ employee_form.email(class="form-control") }}
                        {% for error in employee_form.email.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ employee_form.role.label(class="form-label") }}
                        {{ employee_form.role(class="form-control") }}
                        {% for error in employee_form.role.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ employee_form.phone.label(class="form-label") }}
                        {{ employee_form.phone(class="form-control") }}
                        {% for error in employee_form.phone.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ employee_form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <h4>Add License</h4>
                <form method="POST">
                    {{ license_form.hidden_tag() }}
                    <input type="hidden" name="form_type" value="add_license">
                    <div class="mb-3">
                        {{ license_form.employee_id.label(class="form-label") }}
                        {{ license_form.employee_id(class="form-select") }}
                        {% for error in license_form.employee_id.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ license_form.license_type.label(class="form-label") }}
                        {{ license_form.license_type(class="form-control") }}
                        {% for error in license_form.license_type.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ license_form.issue_date.label(class="form-label") }}
                        {{ license_form.issue_date(class="form-control", type="date") }}
                        {% for error in license_form.issue_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ license_form.expiry_date.label(class="form-label") }}
                        {{ license_form.expiry_date(class="form-control", type="date") }}
                        {% for error in license_form.expiry_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ license_form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>Licenses</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover license-table">
                        <thead>
                            <tr>
                                <th>Employee</th>
                                <th>License Type</th>
                                <th>Issue Date</th>
                                <th>Expiry Date</th>
                                <th>Days Until Expiry</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for license in licenses %}
                            <tr>
                                <td>{{ license.employee_name }}</td>
                                <td>{{ license.license_type }}</td>
                                <td>{{ license.issue_date }}</td>
                                <td class="expiry-cell {{ license.expiry_class }}">{{ license.expiry_date }}</td>
                                <td>{{ license.days_until_expiry }}</td>
                                <td>
                                    <a href="{{ url_for('edit_license', license_id=license.license_id) }}" class="btn btn-edit">Edit</a>
                                    <a href="{{ url_for('delete_license', license_id=license.license_id) }}" class="btn btn-delete" onclick="return confirm('Are you sure?')">Delete</a>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
equipment.html <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Equipment Maintenance - Construction Order System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootswatch@5.3.0/dist/darkly/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body class="dark-mode">
    <div class="loading-spinner" id="loading-spinner">
        <i class="fas fa-spinner fa-spin"></i>
    </div>
    <div class="top-banner">
        <div class="sidebar-spacer"></div>
        <div class="brand-container">
            <div class="brand">
                <span>Construction</span><span>Order</span><span>System</span>
            </div>
        </div>
        <div class="top-right-buttons">
            <button id="theme-toggle" class="btn theme-toggle-btn"><i class="fas fa-sun"></i></button>
            <a href="{{ url_for('logout') }}" class="btn logout-btn">Logout</a>
        </div>
    </div>
    <nav class="sidebar">
        <div class="logo">
            <a href="/">Menu</a>
        </div>
        <div class="user-info">
            Logged in as {{ current_user.username }} (Company ID: {{ current_user.company_id }})
        </div>
        <a href="{{ url_for('dashboard') }}" class="nav-link"><i class="fas fa-tachometer-alt"></i>Dashboard</a>
        <a href="{{ url_for('order_form') }}" class="nav-link"><i class="fas fa-file-alt"></i>Order Form</a>
        <a href="{{ url_for('orders') }}" class="nav-link"><i class="fas fa-history"></i>Order History</a>
        <a href="{{ url_for('track_orders') }}" class="nav-link"><i class="fas fa-truck"></i>Track Orders</a>
        <a href="{{ url_for('incidents') }}" class="nav-link"><i class="fas fa-exclamation-triangle"></i>Incidents</a>
        <a href="{{ url_for('subcontractor_portal') }}" class="nav-link"><i class="fas fa-users"></i>Subcontractor Portal</a>
        <a href="{{ url_for('daily_reports') }}" class="nav-link"><i class="fas fa-clipboard-list"></i>Daily Reports</a>
        <a href="{{ url_for('insights') }}" class="nav-link"><i class="fas fa-chart-line"></i>Insights</a>
        <a href="{{ url_for('notifications') }}" class="nav-link"><i class="fas fa-bell"></i>Notifications {% if notifications_count > 0 %}<span class="badge">{{ notifications_count }}</span>{% endif %}</a>
        <a href="{{ url_for('equipment') }}" class="nav-link active"><i class="fas fa-tools"></i>Equipment Maintenance</a>
        <a href="{{ url_for('weather_forecast') }}" class="nav-link"><i class="fas fa-cloud-sun"></i>Weather Forecast</a>
        <a href="{{ url_for('blueprints') }}" class="nav-link"><i class="fas fa-drafting-compass"></i>Blueprints</a>
        <a href="{{ url_for('reports') }}" class="nav-link"><i class="fas fa-file-export"></i>Reports</a>
        <a href="{{ url_for('mobile') }}" class="nav-link"><i class="fas fa-mobile-alt"></i>Mobile Dashboard</a>
        <a href="{{ url_for('tasks') }}" class="nav-link"><i class="fas fa-tasks"></i>Tasks</a>
        <a href="{{ url_for('timesheets') }}" class="nav-link"><i class="fas fa-clock"></i>Timesheets</a>
        <a href="{{ url_for('inventory') }}" class="nav-link"><i class="fas fa-warehouse"></i>Inventory</a>
        <a href="{{ url_for('safety_audits') }}" class="nav-link"><i class="fas fa-shield-alt"></i>Safety Audits</a>
        {% if current_user.role == 'admin' %}
            <a href="{{ url_for('admin') }}" class="nav-link"><i class="fas fa-user-shield"></i>Admin Portal</a>
            <a href="{{ url_for('employee_licenses') }}" class="nav-link" style="padding-left: 40px;"><i class="fas fa-id-card"></i>Employee Licenses</a>
            <a href="{{ url_for('inductions') }}" class="nav-link" style="padding-left: 40px;"><i class="fas fa-book"></i>Inductions</a>
            <a href="{{ url_for('permits') }}" class="nav-link" style="padding-left: 40px;"><i class="fas fa-stamp"></i>Permits</a>
        {% endif %}
        <a href="{{ url_for('settings') }}" class="nav-link"><i class="fas fa-cog"></i>Settings</a>
    </nav>
    <div class="main-content">
        <div class="welcome-message">
            <h3>Equipment Maintenance</h3>
            <p>Track and schedule maintenance for your equipment.</p>
        </div>
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'success' if category == 'success' else 'warning' if category == 'warning' else 'danger' }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h4>Add Equipment</h4>
                        <form method="POST">
                            <div class="mb-3">
                                <label for="name" class="form-label">Name</label>
                                <input type="text" name="name" id="name" class="form-control" required>
                            </div>
                            <div class="mb-3">
                                <label for="type" class="form-label">Type</label>
                                <input type="text" name="type" id="type" class="form-control" required>
                            </div>
                            <div class="mb-3">
                                <label for="last_maintenance_date" class="form-label">Last Maintenance Date (Optional)</label>
                                <input type="date" name="last_maintenance_date" id="last_maintenance_date" class="form-control">
                            </div>
                            <div class="mb-3">
                                <label for="next_maintenance_date" class="form-label">Next Maintenance Date</label>
                                <input type="date" name="next_maintenance_date" id="next_maintenance_date" class="form-control" required>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Add Equipment</button>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h4>Equipment List</h4>
                        {% if equipment %}
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>Last Maintenance</th>
                                        <th>Next Maintenance</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for item in equipment %}
                                        <tr>
                                            <td>{{ item.equipment_id }}</td>
                                            <td>{{ item.name }}</td>
                                            <td>{{ item.type }}</td>
                                            <td>{{ item.last_maintenance_date if item.last_maintenance_date else 'N/A' }}</td>
                                            <td>{{ item.next_maintenance_date }}</td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        {% else %}
                            <p>No equipment found.</p>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
    <footer>
        <div class="container-fluid">
            <p>© 2025 Construction Order System</p>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/themeToggle.js') }}"></script>
    <script src="{{ url_for('static', filename='js/loadingSpinner.js') }}"></script>
</body>
</html>
error.html {% extends "base.html" %}
{% block title %}Error{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Error {{ status_code }}</h3>
    <p>{{ error }}</p>
</div>
<div class="card">
    <div class="card-body">
        <p class="text-danger">{{ error }}</p>
        <p>If the issue persists, please contact our support team at <a href="mailto:support@siteconnect.com">support@siteconnect.com</a>.</p>
        <a href="{{ url_for('dashboard') }}" class="btn btn-primary">Return to Dashboard</a>
    </div>
</div>
{% endblock %}
incidents.html <!-- templates/incidents.html -->
{% extends "base.html" %}
{% block title %}Incidents{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Incidents</h3>
    <p>View and report incidents.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Report Incident</h4>
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.type.label(class="form-label") }}
                        {{ form.type(class="form-select") }}
                        {% for error in form.type.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.description.label(class="form-label") }}
                        {{ form.description(class="form-control") }}
                        {% for error in form.description.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.location.label(class="form-label") }}
                        {{ form.location(class="form-control") }}
                        {% for error in form.location.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.severity.label(class="form-label") }}
                        {{ form.severity(class="form-select") }}
                        {% for error in form.severity.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>All Incidents</h4>
                {% if incidents %}
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th>Location</th>
                                    <th>Severity</th>
                                    <th>Status</th>
                                    <th>Date</th>
                                    <th>Reported By</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for incident in incidents %}
                                <tr>
                                    <td>{{ incident.incident_id }}</td>
                                    <td>{{ incident.type }}</td>
                                    <td>{{ incident.description }}</td>
                                    <td>{{ incident.location or 'N/A' }}</td>
                                    <td>{{ incident.severity }}</td>
                                    <td>{{ incident.status }}</td>
                                    <td>{{ incident.date }}</td>
                                    <td>{{ incident.reported_by }}</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    {{ pagination.links }}
                {% else %}
                    <p>No incidents found.</p>
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}
inductions.html {% extends "base.html" %}
{% block title %}Inductions{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Inductions</h3>
    <p>Manage employee inductions.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Add Induction</h4>
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.employee_id.label(class="form-label") }}
                        {{ form.employee_id(class="form-select") }}
                        {% for error in form.employee_id.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.induction_type.label(class="form-label") }}
                        {{ form.induction_type(class="form-control") }}
                        {% for error in form.induction_type.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.completion_date.label(class="form-label") }}
                        {{ form.completion_date(class="form-control", type="date") }}
                        {% for error in form.completion_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>Induction List</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Employee</th>
                                <th>Induction Type</th>
                                <th>Completion Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for induction in inductions %}
                            <tr>
                                <td>{{ induction.employee_name }}</td>
                                <td>{{ induction.induction_type }}</td>
                                <td>{{ induction.completion_date }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
insights.html {% extends "base.html" %}
{% block title %}Insights{% endblock %}
{% block extra_head %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="{{ url_for('static', filename='js/insightsCharts.js') }}"></script>
{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Insights</h3>
    <p>Analyze your operations with charts and metrics.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Order Status</h4>
                <canvas id="orderStatusChart" data-status-counts="{{ status_counts }}"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Incident Types</h4>
                <canvas id="incidentTypesChart" data-incident-counts="{{ incident_counts }}"></canvas>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Orders Over Time</h4>
                <canvas id="ordersOverTimeChart" data-dates="{{ order_dates }}" data-counts="{{ order_counts }}"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Incident Severity</h4>
                <canvas id="severityChart" data-severity-counts="{{ severity_counts }}"></canvas>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Subcontractor Status</h4>
                <canvas id="subcontractorStatusChart" data-status-counts="{{ subcontractor_status_counts }}"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Manpower Trend</h4>
                <canvas id="manpowerTrendChart" data-dates="{{ manpower_dates }}" data-values="{{ manpower_values }}"></canvas>
            </div>
        </div>
    </div>
</div>
<div class="card">
    <div class="card-body">
        <h4>Compliance Metrics</h4>
        <p>Induction Compliance: {{ induction_compliance_rate|round(2) }}%</p>
        <p>License Compliance: {{ license_compliance_rate|round(2) }}%</p>
        <p>Vehicles On Road: {{ vehicles_on_road }}</p>
        <p>Vehicles In Yard: {{ vehicles_in_yard }}</p>
    </div>
</div>
{% endblock %}
inventory.html {% extends "base.html" %}
{% block title %}Inventory{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Inventory</h3>
    <p>Manage inventory items.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Add Inventory Item</h4>
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.item_name.label(class="form-label") }}
                        {{ form.item_name(class="form-control") }}
                        {% for error in form.item_name.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.category.label(class="form-label") }}
                        {{ form.category(class="form-control") }}
                        {% for error in form.category.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.quantity.label(class="form-label") }}
                        {{ form.quantity(class="form-control", type="number") }}
                        {% for error in form.quantity.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.reorder_point.label(class="form-label") }}
                        {{ form.reorder_point(class="form-control", type="number") }}
                        {% for error in form.reorder_point.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>Inventory List</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Item Name</th>
                                <th>Category</th>
                                <th>Quantity</th>
                                <th>Reorder Point</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for item in inventory %}
                            <tr>
                                <td>{{ item.item_name }}</td>
                                <td>{{ item.category }}</td>
                                <td>{{ item.quantity }}</td>
                                <td>{{ item.reorder_point }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
login.html {% extends "base.html" %}
{% block title %}Login{% endblock %}
{% block content %}
<div class="login-card">
    <h2 class="login-title">Login</h2>
    <form method="POST" action="">
        {{ form.hidden_tag() }}
        <div class="mb-3">
            {{ form.username.label(class="form-label") }}
            {{ form.username(class="form-control") }}
        </div>
        <div class="mb-3">
            {{ form.password.label(class="form-label") }}
            {{ form.password(class="form-control") }}
        </div>
        <div class="d-grid">
            {{ form.submit(class="btn btn-primary") }}
        </div>
        <a href="{{ url_for('register') }}" class="register-link">Register</a>
    </form>
    <div class="login-time"></div>
</div>
{% endblock %}
mobile_complete_induction.html {% extends "base.html" %}
{% block title %}Complete Induction{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Complete Induction</h3>
    <p>Record an induction completion.</p>
</div>
<div class="card">
    <div class="card-body">
        <form method="POST">
            {{ form.hidden_tag() }}
            <div class="mb-3">
                {{ form.employee_id.label(class="form-label") }}
                {{ form.employee_id(class="form-select") }}
                {% for error in form.employee_id.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.induction_type.label(class="form-label") }}
                {{ form.induction_type(class="form-control") }}
                {% for error in form.induction_type.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.completion_date.label(class="form-label") }}
                {{ form.completion_date(class="form-control", type="date") }}
                {% for error in form.completion_date.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            {{ form.submit(class="btn btn-primary w-100") }}
        </form>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('mobile') }}" class="btn btn-secondary">Back to Mobile Dashboard</a>
</div>
{% endblock %}
mobile_report_incident.html {% extends "base.html" %}
{% block title %}Report Incident{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Report Incident</h3>
    <p>Submit a safety incident report.</p>
</div>
<div class="card">
    <div class="card-body">
        <form method="POST">
            {{ form.hidden_tag() }}
            <div class="mb-3">
                {{ form.type.label(class="form-label") }}
                {{ form.type(class="form-select") }}
                {% for error in form.type.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.description.label(class="form-label") }}
                {{ form.description(class="form-control") }}
                {% for error in form.description.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.location.label(class="form-label") }}
                {{ form.location(class="form-control") }}
                {% for error in form.location.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.severity.label(class="form-label") }}
                {{ form.severity(class="form-select") }}
                {% for error in form.severity.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            {{ form.submit(class="btn btn-primary w-100") }}
        </form>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('mobile') }}" class="btn btn-secondary">Back to Mobile Dashboard</a>
</div>
{% endblock %}
mobile.html {% extends "base.html" %}
{% block title %}Mobile Dashboard{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Mobile Dashboard</h3>
    <p>Quick access to key features.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Quick Actions</h4>
                <a href="{{ url_for('mobile_report_incident') }}" class="btn btn-primary w-100 mb-2">Report Incident</a>
                <a href="{{ url_for('mobile_complete_induction') }}" class="btn btn-primary w-100">Complete Induction</a>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>Weather Forecast</h4>
                {% for site_id, forecasts in weather_data.items %}
                <h5>{{ site_id }}</h5>
                <div class="weather-grid">
                    {% for forecast in forecasts %}
                    <div class="weather-card">
                        <p><strong>{{ forecast.date }}</strong></p>
                        <p>Temp: {{ forecast.temp }}°C</p>
                        <p>{{ forecast.condition }}</p>
                        {% if forecast.warning %}
                        <p class="warning">{{ forecast.warning }}</p>
                        {% endif %}
                    </div>
                    {% endfor %}
                </div>
                {% endfor %}
            </div>
        </div>
    </div>
</div>
{% endblock %}
notifications_mock.html {% extends "base.html" %}
{% block title %}Mock Push Notifications{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Push Notifications (Mock)</h3>
    <p class="text-gray-600 dark:text-gray-400">Simulated mobile notifications for your team.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4 class="text-xl font-semibold mb-4">Recent Notifications</h4>
        <ul class="space-y-2">
            {% for task in tasks if task.due_date <= (today + timedelta(days=1)) %}
            <li class="p-2 border border-gray-200 dark:border-gray-700 rounded">
                <strong>Task Deadline:</strong> {{ task.title }} is due on {{ task.due_date }}.
            </li>
            {% endfor %}
            {% for incident in open_incidents %}
            <li class="p-2 border border-gray-200 dark:border-gray-700 rounded">
                <strong>New Incident:</strong> {{ incident.type }} reported on {{ incident.date }}.
            </li>
            {% endfor %}
        </ul>
    </div>
</div>
{% endblock %}
notifications.html {% extends "base.html" %}
{% block title %}Notifications{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Notifications</h3>
    <p>View system alerts and reminders.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Expiring Licenses</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Employee</th>
                                <th>License Type</th>
                                <th>Expiry Date</th>
                                <th>Days Until Expiry</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for license in expiring_licenses %}
                            <tr>
                                <td>{{ license.employee_name }}</td>
                                <td>{{ license.license_type }}</td>
                                <td>{{ license.expiry_date }}</td>
                                <td>{{ license.days_until_expiry }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card mb-4">
            <div class="card-body">
                <h4>Expired Licenses</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Employee</th>
                                <th>License Type</th>
                                <th>Expiry Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for license in expired_licenses %}
                            <tr>
                                <td>{{ license.employee_name }}</td>
                                <td>{{ license.license_type }}</td>
                                <td>{{ license.expiry_date }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Open Incidents</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Description</th>
                                <th>Severity</th>
                                <th>Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for incident in open_incidents %}
                            <tr>
                                <td>{{ incident.type }}</td>
                                <td>{{ incident.description }}</td>
                                <td>{{ incident.severity }}</td>
                                <td>{{ incident.date }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card mb-4">
            <div class="card-body">
                <h4>Equipment Maintenance Due</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Next Maintenance</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for equip in equipment_maintenance_due %}
                            <tr>
                                <td>{{ equip.name }}</td>
                                <td>{{ equip.type }}</td>
                                <td>{{ equip.next_maintenance_date }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card mb-4">
            <div class="card-body">
                <h4>Low Inventory</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Item Name</th>
                                <th>Category</th>
                                <th>Quantity</th>
                                <th>Reorder Point</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for item in low_inventory %}
                            <tr>
                                <td>{{ item.item_name }}</td>
                                <td>{{ item.category }}</td>
                                <td>{{ item.quantity }}</td>
                                <td>{{ item.reorder_point }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card mb-4">
            <div class="card-body">
                <h4>Overdue Payments</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Milestone</th>
                                <th>Amount</th>
                                <th>Due Date</th>
                                <th>Subcontractor</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for payment in overdue_payments %}
                            <tr>
                                <td>{{ payment.milestone }}</td>
                                <td>{{ payment.amount }}</td>
                                <td>{{ payment.due_date }}</td>
                                <td>{{ payment.company_name }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <h4>Upcoming Audits</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Site ID</th>
                                <th>Audit Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for audit in upcoming_audits %}
                            <tr>
                                <td>{{ audit.site_id }}</td>
                                <td>{{ audit.audit_date }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
order_form.html {% extends "base.html" %}
{% block title %}Order Form{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Order Form</h3>
    <p>Submit a new order for your company.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.item.label(class="form-label") }}
                        {{ form.item(class="form-control") }}
                        {% for error in form.item.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.quantity.label(class="form-label") }}
                        {{ form.quantity(class="form-control") }}
                        {% for error in form.quantity.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.site_id.label(class="form-label") }}
                        {{ form.site_id(class="form-control") }}
                        {% for error in form.site_id.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.comments.label(class="form-label") }}
                        {{ form.comments(class="form-control") }}
                        {% for error in form.comments.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}
order_history.html <!-- templates/order_history.html -->
{% extends "base.html" %}
{% block title %}Order History{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Order History</h3>
    <p>View all past orders for your company.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4>Orders</h4>
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'success' if category == 'success' else 'warning' if category == 'warning' else 'danger' }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Item</th>
                        <th>Quantity</th>
                        <th>Site ID</th>
                        <th>Status</th>
                        <th>Vehicle ID</th>
                        <th>Comments</th>
                        <th>Rating</th>
                        <th>Timestamp</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for order in orders %}
                    <tr>
                        <td>{{ order.order_id }}</td>
                        <td>{{ order.item }}</td>
                        <td>{{ order.quantity }}</td>
                        <td>{{ order.site_id }}</td>
                        <td><span class="status-{% if order.status == 'Pending' %}orange{% elif order.status == 'Shipped' %}green{% else %}blue{% endif %}">{{ order.status }}</span></td>
                        <td>{{ order.vehicle_id or 'N/A' }}</td>
                        <td>{{ order.comments or 'N/A' }}</td>
                        <td>{{ order.rating or 'Not Rated' }}</td>
                        <td>{{ order.timestamp }}</td>
                        <td class="text-center-buttons">
                            {% if order.status == 'Pending' %}
                                <a href="{{ url_for('edit_order', order_id=order.order_id) }}" class="btn btn-warning btn-sm">Edit</a>
                                <a href="{{ url_for('cancel_order', order_id=order.order_id) }}" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to cancel this order?')">Cancel</a>
                            {% endif %}
                            <a href="{{ url_for('track_order', order_id=order.order_id) }}" class="btn btn-link">Track</a>
                            {% if order.status == 'Shipped' and order.rating == 0 %}
                                <a href="{{ url_for('rate_order', order_id=order.order_id) }}" class="btn btn-link">Rate</a>
                            {% endif %}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {{ pagination.links }}
    </div>
</div>
{% endblock %}
orders.html {% extends "base.html" %}
{% block title %}Order History{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Order History</h3>
    <p class="text-gray-600 dark:text-gray-400">View all past orders for your company.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4 class="text-xl font-semibold mb-4">Orders</h4>
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'success' if category == 'success' else 'warning' if category == 'warning' else 'danger' }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Item</th>
                        <th>Quantity</th>
                        <th>Site</th>
                        <th>Status</th>
                        <th>Timestamp</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for order in orders %}
                    <tr>
                        <td>{{ order.order_id }}</td>
                        <td>{{ order.item }}</td>
                        <td>{{ order.quantity }}</td>
                        <td>{{ order.site.name }}</td>
                        <td class="status-{% if order.status == 'Pending' %}orange{% elif order.status == 'Shipped' %}green{% else %}blue{% endif %}">{{ order.status }}</td>
                        <td>{{ order.timestamp }}</td>
                        <td class="space-x-2">
                            <a href="{{ url_for('track_order', order_id=order.order_id) }}" class="btn-primary btn-sm">View Details</a>
                            {% if order.status == 'Pending' %}
                                <a href="{{ url_for('edit_order', order_id=order.order_id) }}" class="btn-primary btn-sm">Edit</a>
                                <a href="{{ url_for('cancel_order', order_id=order.order_id) }}" class="btn-secondary btn-sm" onclick="return confirm('Are you sure you want to cancel this order?')">Cancel</a>
                            {% endif %}
                            {% if order.status == 'Shipped' and order.rating == 0 %}
                                <a href="{{ url_for('rate_order', order_id=order.order_id) }}" class="btn-primary btn-sm">Rate</a>
                            {% endif %}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {{ pagination.links }}
    </div>
</div>
{% endblock %}
permits.html {% extends "base.html" %}
{% block title %}Permits{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Permits</h3>
    <p>Manage site permits.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Add Permit</h4>
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.site_id.label(class="form-label") }}
                        {{ form.site_id(class="form-control") }}
                        {% for error in form.site_id.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.permit_type.label(class="form-label") }}
                        {{ form.permit_type(class="form-control") }}
                        {% for error in form.permit_type.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.issue_date.label(class="form-label") }}
                        {{ form.issue_date(class="form-control", type="date") }}
                        {% for error in form.issue_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.expiry_date.label(class="form-label") }}
                        {{ form.expiry_date(class="form-control", type="date") }}
                        {% for error in form.expiry_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>Permit List</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Site ID</th>
                                <th>Permit Type</th>
                                <th>Issue Date</th>
                                <th>Expiry Date</th>
                                <th>Days Until Expiry</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for permit in permits %}
                            <tr>
                                <td>{{ permit.site_id }}</td>
                                <td>{{ permit.permit_type }}</td>
                                <td>{{ permit.issue_date }}</td>
                                <td>{{ permit.expiry_date }}</td>
                                <td>{{ permit.days_until_expiry }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
profile.html {% extends "base.html" %}
{% block title %}Profile{% endblock %}
{% block breadcrumb %}Profile{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">User Profile</h3>
    <p class="text-gray-600 dark:text-gray-400">Manage your account details and settings.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4 class="text-xl font-semibold mb-4">Profile Details</h4>
        <p><strong>Username:</strong> {{ current_user.username }}</p>
        <p><strong>Role:</strong> {{ current_user.role.name }}</p>
        <p><strong>Company ID:</strong> {{ current_user.company_id }}</p>
        <p><strong>Email:</strong> {{ current_user.email or 'N/A' }}</p>
        <p><strong>Last Login:</strong> {{ '2025-06-09 04:58'|strftime('%Y-%m-%d %H:%M') }} IST</p>
        <a href="{{ url_for('settings') }}" class="btn-primary mt-4">Edit Profile</a>
    </div>
</div>
{% endblock %}
project_detail.html     {% extends "base.html" %}
{% block title %}Project: {{ project.name }}{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Project: {{ project.name }}</h3>
    <p class="text-gray-600 dark:text-gray-400">Manage project details, milestones, and assignments.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4 class="text-xl font-semibold mb-4">Project Details</h4>
        <p><strong>Description:</strong> {{ project.description or 'N/A' }}</p>
        <p><strong>Status:</strong> {{ project.status }}</p>
        <p><strong>Start Date:</strong> {{ project.start_date }}</p>
        <p><strong>End Date:</strong> {{ project.end_date }}</p>
    </div>
</div>
<div class="row grid grid-cols-1 md:grid-cols-2 gap-4">
    <div class="card">
        <div class="card-body">
            <h4 class="text-xl font-semibold mb-4">Add Milestone</h4>
            <form method="POST" class="space-y-4">
                {{ milestone_form.hidden_tag() }}
                <input type="hidden" name="milestone_form" value="1">
                <div>
                    {{ milestone_form.name.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ milestone_form.name(class="form-control mt-1") }}
                    {% for error in milestone_form.name.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                <div>
                    {{ milestone_form.due_date.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ milestone_form.due_date(class="form-control mt-1") }}
                    {% for error in milestone_form.due_date.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                <div>
                    {{ milestone_form.status.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ milestone_form.status(class="form-control mt-1") }}
                    {% for error in milestone_form.status.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                {{ milestone_form.submit(class="btn-primary w-full") }}
            </form>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <h4 class="text-xl font-semibold mb-4">Milestones</h4>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Due Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for milestone in milestones %}
                        <tr>
                            <td>{{ milestone.name }}</td>
                            <td>{{ milestone.due_date }}</td>
                            <td>{{ milestone.status }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="card">
    <div class="card-body">
        <h4 class="text-xl font-semibold mb-4">Assign Employee</h4>
        <form method="POST" class="space-y-4">
            {{ assignment_form.hidden_tag() }}
            <input type="hidden" name="assignment_form" value="1">
            <div>
                {{ assignment_form.employee_id.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                {{ assignment_form.employee_id(class="form-control mt-1") }}
                {% for error in assignment_form.employee_id.errors %}
                    <span class="text-red-500 text-sm">{{ error }}</span>
                {% endfor %}
            </div>
            <div>
                {{ assignment_form.role.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                {{ assignment_form.role(class="form-control mt-1") }}
                {% for error in assignment_form.role.errors %}
                    <span class="text-red-500 text-sm">{{ error }}</span>
                {% endfor %}
            </div>
            {{ assignment_form.submit(class="btn-primary w-full") }}
        </form>
        <h4 class="text-xl font-semibold mt-6 mb-4">Assignments</h4>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Employee</th>
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for assignment in assignments %}
                    <tr>
                        <td>{{ assignment.employee_name }}</td>
                        <td>{{ assignment.role }}</td>
                        <td>
                            <a href="{{ url_for('delete_assignment', assignment_id=assignment.assignment_id, project_id=project.project_id) }}"
                               class="btn-secondary btn-sm" onclick="return confirm('Are you sure you want to remove this assignment?')">Remove</a>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="mt-4">
    <a href="{{ url_for('projects') }}" class="btn-primary">Back to Projects</a>
</div>
{% endblock %}
projects.html {% extends "base.html" %}
{% block title %}Projects{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Projects</h3>
    <p class="text-gray-600 dark:text-gray-400">Manage your construction projects.</p>
</div>
<div class="row grid grid-cols-1 md:grid-cols-2 gap-4">
    <div class="card">
        <div class="card-body">
            <h4 class="text-xl font-semibold mb-4">Create Project</h4>
            <form method="POST" class="space-y-4">
                {{ form.hidden_tag() }}
                <div>
                    {{ form.name.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ form.name(class="form-control mt-1") }}
                    {% for error in form.name.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                <div>
                    {{ form.description.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ form.description(class="form-control mt-1") }}
                    {% for error in form.description.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                <div>
                    {{ form.start_date.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ form.start_date(class="form-control mt-1") }}
                    {% for error in form.start_date.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                <div>
                    {{ form.end_date.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ form.end_date(class="form-control mt-1") }}
                    {% for error in form.end_date.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                <div>
                    {{ form.status.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ form.status(class="form-control mt-1") }}
                    {% for error in form.status.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                {{ form.submit(class="btn-primary w-full") }}
            </form>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <h4 class="text-xl font-semibold mb-4">Project List</h4>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for project in projects %}
                        <tr>
                            <td>{{ project.name }}</td>
                            <td>{{ project.status }}</td>
                            <td>{{ project.start_date }}</td>
                            <td>{{ project.end_date }}</td>
                            <td>
                                <a href="{{ url_for('project_detail', project_id=project.project_id) }}" class="btn-primary btn-sm">View</a>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {{ pagination.links }}
        </div>
    </div>
</div>
{% endblock %}
rate_order.html {% extends "base.html" %}
{% block title %}Rate Order{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Rate Order #{{ order.order_id }}</h3>
    <p>Provide a rating for this order (1-5).</p>
</div>
<div class="card">
    <div class="card-body">
        <form method="POST">
            <div class="mb-3">
                <label for="rating" class="form-label">Rating</label>
                <select name="rating" id="rating" class="form-select" required>
                    <option value="1">1 - Poor</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5 - Excellent</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary w-100">Submit Rating</button>
        </form>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('orders') }}" class="btn btn-secondary">Back to Orders</a>
</div>
{% endblock %}
register.html {% extends "base.html" %}
{% block body_class %}register-page{% endblock %}
{% block title %}Register{% endblock %}
{% block breadcrumb %}{% endblock %}
{% block extra_head %}
<style>
/* Ensure register page does not apply dark mode and hides unwanted elements */
body.register-page {
    background-color: #FFFFFF !important;
    color: #1F2937 !important;
}
/* Hide notifications, search bar, and chat widget on register page */
body.register-page .top-right-buttons,
body.register-page .global-search,
body.register-page .chat-widget,
body.register-page .notification-dropdown {
    display: none !important;
}
</style>
<script>
// Ensure search bar and support chat are removed after page load
document.addEventListener('DOMContentLoaded', function() {
    // Remove search bar
    var searchElements = document.querySelectorAll('.global-search');
    for (var i = 0; i < searchElements.length; i++) {
        searchElements[i].remove();
    }
    // Remove top-right buttons (theme toggle, notifications)
    var topRightButtons = document.querySelectorAll('.top-right-buttons');
    for (var j = 0; j < topRightButtons.length; j++) {
        topRightButtons[j].remove();
    }
    // Remove support chat widget
    var chatWidgets = document.querySelectorAll('.chat-widget');
    for (var k = 0; k < chatWidgets.length; k++) {
        chatWidgets[k].remove();
    }
    // Remove any notification dropdowns
    var notifications = document.querySelectorAll('.notification-dropdown');
    for (var m = 0; m < notifications.length; m++) {
        notifications[m].remove();
    }
});
</script>
{% endblock %}
{% block top_banner %}
<div class="top-banner login-banner">
    <div class="brand-container">
        <span class="brand">Site Connect</span>
    </div>
</div>
{% endblock %}
{% block content %}
<div class="register-container">
    <div class="register-box">
        <h2>Register for Site Connect</h2>
        <form method="POST">
            {{ form.hidden_tag() }}
            <div class="mb-3">
                {{ form.username.label(class="form-label") }}
                {{ form.username(class="form-control", placeholder="Enter your username", **{"aria-label": "Username"}) }}
                {% for error in form.username.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.password.label(class="form-label") }}
                {{ form.password(class="form-control", placeholder="Enter your password", **{"aria-label": "Password"}) }}
                {% for error in form.password.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            {{ form.submit(class="btn btn-primary w-100 register-btn") }}
        </form>
        <div class="mt-3 text-center">
            <a href="{{ url_for('login') }}" class="btn btn-link">Already have an account? Login</a>
        </div>
    </div>
</div>
{% endblock %}
reports.html {% extends "base.html" %}
{% block title %}Reports{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Reports</h3>
    <p>Generate reports for your orders.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4>Generate Order Report</h4>
        <form method="POST">
            <div class="mb-3">
                <label for="report_type" class="form-label">Report Type</label>
                <select name="report_type" id="report_type" class="form-select" required>
                    <option value="orders">Orders</option>
                </select>
            </div>
            <div class="mb-3">
                <label for="start_date" class="form-label">Start Date</label>
                <input type="date" name="start_date" id="start_date" class="form-control" required>
            </div>
            <div class="mb-3">
                <label for="end_date" class="form-label">End Date</label>
                <input type="date" name="end_date" id="end_date" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary w-100">Generate Report</button>
        </form>
    </div>
</div>
{% endblock %}
resource_allocation.html {% extends "base.html" %}
{% block title %}Resource Allocation{% endblock %}
{% block breadcrumb %}Resource Allocation{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Resource Allocation Dashboard</h3>
    <p>Manage resource allocation across sites as of 2025-06-02 19:42 IST.</p>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Resource Allocation Overview</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="resource-allocation-table">
                        <thead>
                            <tr>
                                <th onclick="sortTable('resource-allocation-table', 'Site')">Site</th>
                                <th onclick="sortTable('resource-allocation-table', 'Equipment')">Equipment</th>
                                <th onclick="sortTable('resource-allocation-table', 'Labor')">Labor</th>
                                <th onclick="sortTable('resource-allocation-table', 'Materials')">Materials</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Site A</td>
                                <td>3 Cranes, 2 Forklifts</td>
                                <td>20 Workers</td>
                                <td>500 Concrete Blocks, 200 Steel Beams</td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#reallocateSiteAModal" aria-label="Reallocate resources for Site A">Reallocate</button>
                                </td>
                            </tr>
                            <!-- Reallocate Site A Modal -->
                            <div class="modal fade" id="reallocateSiteAModal" tabindex="-1" aria-labelledby="reallocateSiteAModalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="reallocateSiteAModalLabel">Reallocate Resources for Site A</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <p><strong>Current Allocation:</strong></p>
                                            <p>Equipment: 3 Cranes, 2 Forklifts</p>
                                            <p>Labor: 20 Workers</p>
                                            <p>Materials: 500 Concrete Blocks, 200 Steel Beams</p>
                                            <p><strong>Mock Action:</strong> Reallocate resources (e.g., move 1 Crane to Site B, add 5 Workers).</p>
                                            <button type="button" class="btn btn-primary" onclick="alert('Resources reallocated successfully (mock action).')" aria-label="Confirm reallocation for Site A">Confirm Reallocation</button>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <tr>
                                <td>Site B</td>
                                <td>2 Cranes, 1 Excavator</td>
                                <td>15 Workers</td>
                                <td>300 Concrete Blocks, 150 Steel Beams</td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#reallocateSiteBModal" aria-label="Reallocate resources for Site B">Reallocate</button>
                                </td>
                            </tr>
                            <!-- Reallocate Site B Modal -->
                            <div class="modal fade" id="reallocateSiteBModal" tabindex="-1" aria-labelledby="reallocateSiteBModalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="reallocateSiteBModalLabel">Reallocate Resources for Site B</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <p><strong>Current Allocation:</strong></p>
                                            <p>Equipment: 2 Cranes, 1 Excavator</p>
                                            <p>Labor: 15 Workers</p>
                                            <p>Materials: 300 Concrete Blocks, 150 Steel Beams</p>
                                            <p><strong>Mock Action:</strong> Reallocate resources (e.g., move 1 Excavator to Site C, reduce 50 Concrete Blocks).</p>
                                            <button type="button" class="btn btn-primary" onclick="alert('Resources reallocated successfully (mock action).')" aria-label="Confirm reallocation for Site B">Confirm Reallocation</button>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <tr>
                                <td>Site C</td>
                                <td>1 Crane, 2 Forklifts</td>
                                <td>25 Workers</td>
                                <td>400 Concrete Blocks, 100 Steel Beams</td>
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#reallocateSiteCModal" aria-label="Reallocate resources for Site C">Reallocate</button>
                                </td>
                            </tr>
                            <!-- Reallocate Site C Modal -->
                            <div class="modal fade" id="reallocateSiteCModal" tabindex="-1" aria-labelledby="reallocateSiteCModalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="reallocateSiteCModalLabel">Reallocate Resources for Site C</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <p><strong>Current Allocation:</strong></p>
                                            <p>Equipment: 1 Crane, 2 Forklifts</p>
                                            <p>Labor: 25 Workers</p>
                                            <p>Materials: 400 Concrete Blocks, 100 Steel Beams</p>
                                            <p><strong>Mock Action:</strong> Reallocate resources (e.g., add 1 Crane from Site A, reduce 5 Workers).</p>
                                            <button type="button" class="btn btn-primary" onclick="alert('Resources reallocated successfully (mock action).')" aria-label="Confirm reallocation for Site C">Confirm Reallocation</button>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
safety_audits.html {% extends "base.html" %}
{% block title %}Safety Audits{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Safety Audits</h3>
    <p>Schedule and manage safety audits.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Schedule Audit</h4>
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.site_id.label(class="form-label") }}
                        {{ form.site_id(class="form-control") }}
                        {% for error in form.site_id.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.audit_date.label(class="form-label") }}
                        {{ form.audit_date(class="form-control", type="date") }}
                        {% for error in form.audit_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.description.label(class="form-label") }}
                        {{ form.description(class="form-control") }}
                        {% for error in form.description.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>Audit List</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Site ID</th>
                                <th>Audit Date</th>
                                <th>Description</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for audit in audits %}
                            <tr>
                                <td>{{ audit.site_id }}</td>
                                <td>{{ audit.audit_date }}</td>
                                <td>{{ audit.description }}</td>
                                <td>{{ audit.status }}</td>
                                <td>
                                    <a href="{{ url_for('update_safety_audit', audit_id=audit.audit_id) }}" class="btn btn-edit">Update</a>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
settings.html {% extends "base.html" %}
{% block title %}Settings{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Account Settings</h3>
    <p class="text-gray-600 dark:text-gray-400">Configure your account details.</p>
</div>
<div class="card">
    <div class="card-body">
        <form method="POST" class="space-y-4">
            {{ form.hidden_tag() }}
            <div>
                {{ form.username.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                {{ form.username(class="form-control mt-1") }}
                {% for error in form.username.errors %}
                    <span class="text-red-500 text-sm">{{ error }}</span>
                {% endfor %}
            </div>
            <div>
                {{ form.email.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                {{ form.email(class="form-control mt-1") }}
                {% for error in form.email.errors %}
                    <span class="text-red-500 text-sm">{{ error }}</span>
                {% endfor %}
            </div>
            <div>
                {{ form.password.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                {{ form.password(class="form-control mt-1") }}
                {% for error in form.password.errors %}
                    <span class="text-red-500 text-sm">{{ error }}</span>
                {% endfor %}
            </div>
            {{ form.submit(class="btn-primary w-full") }}
        </form>
    </div>
</div>
{% endblock %}
subcontractor_payments.html <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Subcontractor Payments - Construction Order System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootswatch@5.3.0/dist/darkly/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body class="dark-mode">
    <div class="loading-spinner" id="loading-spinner">
        <i class="fas fa-spinner fa-spin"></i>
    </div>
    <div class="top-banner">
        <div class="sidebar-spacer"></div>
        <div class="brand-container">
            <div class="brand">
                <span>Construction</span><span>Order</span><span>System</span>
            </div>
        </div>
        <div class="top-right-buttons">
            <button id="theme-toggle" class="btn theme-toggle-btn"><i class="fas fa-sun"></i></button>
            <a href="{{ url_for('logout') }}" class="btn logout-btn">Logout</a>
        </div>
    </div>
    <nav class="sidebar">
        <div class="logo">
            <a href="/">Menu</a>
        </div>
        <div class="user-info">
            Logged in as {{ current_user.username }} (Company ID: {{ current_user.company_id }})
        </div>
        <a href="{{ url_for('dashboard') }}" class="nav-link"><i class="fas fa-tachometer-alt"></i>Dashboard</a>
        <a href="{{ url_for('order_form') }}" class="nav-link"><i class="fas fa-file-alt"></i>Order Form</a>
        <a href="{{ url_for('orders') }}" class="nav-link"><i class="fas fa-history"></i>Order History</a>
        <a href="{{ url_for('track_orders') }}" class="nav-link"><i class="fas fa-truck"></i>Track Orders</a>
        <a href="{{ url_for('incidents') }}" class="nav-link"><i class="fas fa-exclamation-triangle"></i>Incidents</a>
        <a href="{{ url_for('subcontractor_portal') }}" class="nav-link active"><i class="fas fa-users"></i>Subcontractor Portal</a>
        <a href="{{ url_for('daily_reports') }}" class="nav-link"><i class="fas fa-clipboard-list"></i>Daily Reports</a>
        <a href="{{ url_for('insights') }}" class="nav-link"><i class="fas fa-chart-line"></i>Insights</a>
        <a href="{{ url_for('notifications') }}" class="nav-link"><i class="fas fa-bell"></i>Notifications {% if notifications_count > 0 %}<span class="badge">{{ notifications_count }}</span>{% endif %}</a>
        <a href="{{ url_for('equipment') }}" class="nav-link"><i class="fas fa-tools"></i>Equipment Maintenance</a>
        <a href="{{ url_for('weather_forecast') }}" class="nav-link"><i class="fas fa-cloud-sun"></i>Weather Forecast</a>
        <a href="{{ url_for('subcontractor_payments') }}" class="nav-link"><i class="fas fa-money-check-alt"></i>Subcontractor Payments</a>
        <a href="{{ url_for('blueprints') }}" class="nav-link"><i class="fas fa-drafting-compass"></i>Blueprints</a>
        <a href="{{ url_for('reports') }}" class="nav-link"><i class="fas fa-file-export"></i>Reports</a>
        <a href="{{ url_for('mobile') }}" class="nav-link"><i class="fas fa-mobile-alt"></i>Mobile Dashboard</a>
        <a href="{{ url_for('tasks') }}" class="nav-link"><i class="fas fa-tasks"></i>Tasks</a>
        <a href="{{ url_for('timesheets') }}" class="nav-link"><i class="fas fa-clock"></i>Timesheets</a>
        <a href="{{ url_for('inventory') }}" class="nav-link"><i class="fas fa-warehouse"></i>Inventory</a>
        <a href="{{ url_for('safety_audits') }}" class="nav-link"><i class="fas fa-shield-alt"></i>Safety Audits</a>
        {% if current_user.role == 'admin' %}
            <a href="{{ url_for('admin') }}" class="nav-link"><i class="fas fa-user-shield"></i>Admin Portal</a>
            <a href="{{ url_for('employee_licenses') }}" class="nav-link" style="padding-left: 40px;"><i class="fas fa-id-card"></i>Employee Licenses</a>
            <a href="{{ url_for('inductions') }}" class="nav-link" style="padding-left: 40px;"><i class="fas fa-book"></i>Inductions</a>
            <a href="{{ url_for('permits') }}" class="nav-link" style="padding-left: 40px;"><i class="fas fa-stamp"></i>Permits</a>
        {% endif %}
        <a href="{{ url_for('settings') }}" class="nav-link"><i class="fas fa-cog"></i>Settings</a>
    </nav>
    <div class="main-content">
        <div class="welcome-message">
            <h3>Subcontractor Payments for {{ subcontractor.name }}</h3>
            <p>Manage payment milestones and statuses.</p>
        </div>
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'success' if category == 'success' else 'warning' if category == 'warning' else 'danger' }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h4>Add Payment Milestone</h4>
                        <form method="POST">
                            <div class="mb-3">
                                <label for="milestone" class="form-label">Milestone</label>
                                <input type="text" name="milestone" id="milestone" class="form-control" required>
                            </div>
                            <div class="mb-3">
                                <label for="amount" class="form-label">Amount</label>
                                <input type="number" step="0.01" name="amount" id="amount" class="form-control" required>
                            </div>
                            <div class="mb-3">
                                <label for="due_date" class="form-label">Due Date</label>
                                <input type="date" name="due_date" id="due_date" class="form-control" required>
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Add Milestone</button>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h4>Payment Milestones</h4>
                        {% if payments %}
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Milestone</th>
                                        <th>Amount</th>
                                        <th>Due Date</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for payment in payments %}
                                        <tr>
                                            <td>{{ payment.milestone }}</td>
                                            <td>{{ payment.amount }}</td>
                                            <td>{{ payment.due_date }}</td>
                                            <td>{{ payment.status }}</td>
                                            <td>
                                                {% if payment.status == 'Pending' %}
                                                    <form method="POST" style="display:inline;">
                                                        <input type="hidden" name="payment_id" value="{{ payment.id }}">
                                                        <button type="submit" class="btn btn-success btn-sm">Mark as Paid</button>
                                                    </form>
                                                {% endif %}
                                            </td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        {% else %}
                            <p>No payment milestones found for this subcontractor.</p>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-3">
            <a href="{{ url_for('subcontractor_portal') }}" class="btn btn-secondary">Back to Subcontractor Portal</a>
        </div>
    </div>
    <footer>
        <div class="container-fluid">
            <p>© 2025 Construction Order System</p>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/themeToggle.js') }}"></script>
    <script src="{{ url_for('static', filename='js/loadingSpinner.js') }}"></script>
</body>
</html>
subcontractor_portal.html {% extends "base.html" %}
{% block title %}Subcontractor Portal{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Subcontractor Portal</h3>
    <p>Manage subcontractor agreements and payments.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4>Subcontractors</h4>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Agreement Status</th>
                        <th>Payment Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for subcontractor in subcontractors %}
                    <tr>
                        <td>{{ subcontractor.name }}</td>
                        <td>{{ subcontractor.agreement_status }}</td>
                        <td>{{ subcontractor.payment_status }}</td>
                        <td>
                            <a href="{{ url_for('subcontractor_payments', subcontractor_id=subcontractor.subcontractor_id) }}" class="btn btn-primary">Manage Payments</a>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endblock %}
tasks.html {% extends "base.html" %}
{% block title %}Tasks{% endblock %}
{% block extra_head %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="{{ url_for('static', filename='js/ganttchart.js') }}"></script>
{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Tasks</h3>
    <p>Manage and track tasks.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>Add Task</h4>
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.title.label(class="form-label") }}
                        {{ form.title(class="form-control") }}
                        {% for error in form.title.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.description.label(class="form-label") }}
                        {{ form.description(class="form-control") }}
                        {% for error in form.description.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.assigned_to.label(class="form-label") }}
                        {{ form.assigned_to(class="form-select") }}
                        {% for error in form.assigned_to.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    <div class="mb-3">
                        {{ form.due_date.label(class="form-label") }}
                        {{ form.due_date(class="form-control", type="date") }}
                        {% for error in form.due_date.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>Task List</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Assigned To</th>
                                <th>Status</th>
                                <th>Due Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for task in tasks %}
                            <tr>
                                <td>{{ task.title }}</td>
                                <td>{{ task.assigned_to }}</td>
                                <td>{{ task.status }}</td>
                                <td>{{ task.due_date }}</td>
                                <td>
                                    <form method="POST" style="display:inline;">
                                        <input type="hidden" name="task_id" value="{{ task.task_id }}">
                                        <select name="status" onchange="this.form.submit()">
                                            <option value="Not Started" {% if task.status == 'Not Started' %}selected{% endif %}>Not Started</option>
                                            <option value="In Progress" {% if task.status == 'In Progress' %}selected{% endif %}>In Progress</option>
                                            <option value="Completed" {% if task.status == 'Completed' %}selected{% endif %}>Completed</option>
                                        </select>
                                    </form>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
                <h4>Gantt Chart</h4>
                <canvas id="ganttChart" data-labels="{{ gantt_labels }}" data-start-dates="{{ gantt_start_dates }}"
                        data-due-dates="{{ gantt_due_dates }}" data-colors="{{ gantt_colors }}"></canvas>
            </div>
        </div>
    </div>
</div>
{% endblock %}
timesheets.html {% extends "base.html" %}
{% block title %}Timesheets{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Timesheets</h3>
    <p>Manage employee timesheets.</p>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>{{ 'Clock Out' if is_clocked_in else 'Clock In' }}</h4>
                <form method="POST">
                    {{ form.hidden_tag() }}
                    <div class="mb-3">
                        {{ form.action.label(class="form-label") }}
                        {{ form.action(class="form-select") }}
                        {% for error in form.action.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {% if is_clocked_in %}
                    <div class="mb-3">
                        {{ form.break_duration.label(class="form-label") }}
                        {{ form.break_duration(class="form-control", type="number") }}
                        {% for error in form.break_duration.errors %}
                            <span class="text-danger">{{ error }}</span>
                        {% endfor %}
                    </div>
                    {% endif %}
                    {{ form.submit(class="btn btn-primary w-100") }}
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h4>Timesheet History</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Employee</th>
                                <th>Clock In</th>
                                <th>Clock Out</th>
                                <th>Break (min)</th>
                                <th>Status</th>
                                <th>Approved By</th>
                                {% if current_user.role == 'admin' %}
                                <th>Actions</th>
                                {% endif %}
                            </tr>
                        </thead>
                        <tbody>
                            {% for timesheet in timesheets %}
                            <tr>
                                <td>{{ timesheet.employee }}</td>
                                <td>{{ timesheet.clock_in }}</td>
                                <td>{{ timesheet.clock_out or 'N/A' }}</td>
                                <td>{{ timesheet.break_duration }}</td>
                                <td>{{ timesheet.status }}</td>
                                <td>{{ timesheet.approved_by }}</td>
                                {% if current_user.role == 'admin' %}
                                <td>
                                    {% if timesheet.status == 'Pending' %}
                                    <a href="{{ url_for('approve_timesheet', timesheet_id=timesheet.timesheet_id) }}" class="btn btn-success">Approve</a>
                                    <a href="{{ url_for('reject_timesheet', timesheet_id=timesheet.timesheet_id) }}" class="btn btn-danger">Reject</a>
                                    {% endif %}
                                </td>
                                {% endif %}
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
{% extends "base.html" %}
{% block title %}Timesheets{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3 class="text-2xl font-bold">Timesheets</h3>
    <p class="text-gray-600 dark:text-gray-400">Manage employee timesheets.</p>
</div>
<div class="row grid grid-cols-1 md:grid-cols-2 gap-4">
    <div class="card">
        <div class="card-body">
            <h4 class="text-xl font-semibold">{{ 'Clock Out' if is_clocked_in else 'Clock In' }}</h4>
            <form method="POST" class="space-y-4">
                {{ form.hidden_tag() }}
                <div>
                    {{ form.action.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ form.action(class="form-control mt-1") }}
                    {% for error in form.action.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                {% if is_clocked_in %}
                <div>
                    {{ form.break_duration.label(class="block text-sm font-medium text-gray-700 dark:text-gray-300") }}
                    {{ form.break_duration(class="form-control mt-1", type="number") }}
                    {% for error in form.break_duration.errors %}
                        <span class="text-red-500 text-sm">{{ error }}</span>
                    {% endfor %}
                </div>
                {% endif %}
                {{ form.submit(class="btn-primary w-full") }}
            </form>
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <h4 class="text-xl font-semibold mb-4">Timesheet History</h4>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Employee</th>
                            <th>Clock In</th>
                            <th>Clock Out</th>
                            <th>Break (min)</th>
                            <th>Status</th>
                            <th>Approved By</th>
                            {% if has_permission('manage_users') %}
                            <th>Actions</th>
                            {% endif %}
                        </tr>
                    </thead>
                    <tbody>
                        {% for timesheet in timesheets %}
                        <tr>
                            <td>{{ timesheet.employee }}</td>
                            <td>{{ timesheet.clock_in }}</td>
                            <td>{{ timesheet.clock_out or 'N/A' }}</td>
                            <td>{{ timesheet.break_duration }}</td>
                            <td>{{ timesheet.status }}</td>
                            <td>{{ timesheet.approved_by }}</td>
                            {% if has_permission('manage_users') %}
                            <td>
                                {% if timesheet.status == 'Pending' %}
                                <a href="{{ url_for('approve_timesheet', timesheet_id=timesheet.timesheet_id) }}" class="btn-primary btn-sm">Approve</a>
                                <a href="{{ url_for('reject_timesheet', timesheet_id=timesheet.timesheet_id) }}" class="btn-secondary btn-sm">Reject</a>
                                {% endif %}
                            </td>
                            {% endif %}
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {{ pagination.links }}
        </div>
    </div>
</div>
{% endblock %}
track_order.html {% extends "base.html" %}
{% block title %}Track Order{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Track Order #{{ order.order_id }}</h3>
    <p>View tracking details for this order.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4>Order Details</h4>
        <p><strong>Item:</strong> {{ order.item }}</p>
        <p><strong>Quantity:</strong> {{ order.quantity }}</p>
        <p><strong>Site ID:</strong> {{ order.site_id }}</p>
        <p><strong>Status:</strong> {{ order.status }}</p>
        <p><strong>Comments:</strong> {{ order.comments or 'N/A' }}</p>
        {% if latitude and longitude %}
        <h4>Location</h4>
        <p><strong>Latitude:</strong> {{ latitude }}</p>
        <p><strong>Longitude:</strong> {{ longitude }}</p>
        <div id="map" style="height: 300px;"></div>
        <script>
            // Placeholder for map integration (e.g., Leaflet.js)
            // Initialize map with latitude={{ latitude }}, longitude={{ longitude }}
        </script>
        {% else %}
        <p>No location data available.</p>
        {% endif %}
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('track_orders') }}" class="btn btn-secondary">Back to Track Orders</a>
</div>
{% endblock %}
track_orders.html <!-- templates/track_orders.html -->
{% extends "base.html" %}
{% block title %}Track Orders{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Track Orders</h3>
    <p>Monitor the status of your orders.</p>
</div>
<div class="card">
    <div class="card-body">
        <h4>All Orders</h4>
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'success' if category == 'success' else 'warning' if category == 'warning' else 'danger' }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Item</th>
                        <th>Quantity</th>
                        <th>Site ID</th>
                        <th>Status</th>
                        <th>Vehicle ID</th>
                        <th>Comments</th>
                        <th>Rating</th>
                        <th>Timestamp</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for order in orders %}
                    <tr>
                        <td>{{ order.order_id }}</td>
                        <td>{{ order.item }}</td>
                        <td>{{ order.quantity }}</td>
                        <td>{{ order.site_id }}</td>
                        <td>{{ order.status }}</td>
                        <td>{{ order.vehicle_id or 'N/A' }}</td>
                        <td>{{ order.comments or 'N/A' }}</td>
                        <td>{{ order.rating or 'Not Rated' }}</td>
                        <td>{{ order.timestamp }}</td>
                        <td>
                            <a href="{{ url_for('track_order', order_id=order.order_id) }}" class="btn btn-sm btn-primary">Track</a>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {{ pagination.links }}
    </div>
</div>
{% endblock %}
update_safety_audit.html {% extends "base.html" %}
{% block title %}Update Safety Audit{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Update Safety Audit #{{ audit.audit_id }}</h3>
    <p>Modify audit details.</p>
</div>
<div class="card">
    <div class="card-body">
        <form method="POST">
            {{ form.hidden_tag() }}
            <div class="mb-3">
                {{ form.site_id.label(class="form-label") }}
                {{ form.site_id(class="form-control") }}
                {% for error in form.site_id.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.audit_date.label(class="form-label") }}
                {{ form.audit_date(class="form-control", type="date") }}
                {% for error in form.audit_date.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            <div class="mb-3">
                {{ form.description.label(class="form-label") }}
                {{ form.description(class="form-control") }}
                {% for error in form.description.errors %}
                    <span class="text-danger">{{ error }}</span>
                {% endfor %}
            </div>
            {{ form.submit(class="btn btn-primary w-100") }}
        </form>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('safety_audits') }}" class="btn btn-secondary">Back to Safety Audits</a>
</div>
{% endblock %}
view_blueprint.html {% extends "base.html" %}
{% block title %}View Blueprint{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Blueprint: {{ blueprint.title }}</h3>
    <p>View blueprint details and comments.</p>
</div>
<div class="card mb-4">
    <div class="card-body">
        <h4>Blueprint Details</h4>
        <p><strong>File:</strong> {{ blueprint.file_url.split('/')[-1] }}</p>
        <p><strong>Uploaded At:</strong> {{ blueprint.uploaded_at }}</p>
        <p><strong>Uploaded By:</strong> {{ blueprint.uploaded_by }}</p>
        <a href="{{ url_for('static', filename=blueprint.file_url) }}" class="btn btn-primary" target="_blank">View File</a>
    </div>
</div>
<div class="card">
    <div class="card-body">
        <h4>Comments</h4>
        <form method="POST" class="mb-4">
            <div class="mb-3">
                <label for="comment_text" class="form-label">Add Comment</label>
                <textarea name="comment_text" id="comment_text" class="form-control" required></textarea>
            </div>
            <button type="submit" class="btn btn-primary w-100">Submit Comment</button>
        </form>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Comment</th>
                        <th>Commented At</th>
                        <th>Commenter</th>
                    </tr>
                </thead>
                <tbody>
                    {% for comment in comments %}
                    <tr>
                        <td>{{ comment.comment_text }}</td>
                        <td>{{ comment.commented_at }}</td>
                        <td>{{ comment.commenter }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="mt-3">
    <a href="{{ url_for('blueprints') }}" class="btn btn-secondary">Back to Blueprints</a>
</div>
{% endblock %}
weather_forecast.html {% extends "base.html" %}
{% block title %}Weather Forecast{% endblock %}
{% block content %}
<div class="welcome-message">
    <h3>Weather Forecast</h3>
    <p>View weather conditions for your sites.</p>
</div>
<div class="row">
    {% for site_id, forecasts in weather_data.items %}
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-body">
                <h4>{{ site_id }}</h4>
                <div class="weather-grid">
                    {% for forecast in forecasts %}
                    <div class="weather-card">
                        <p><strong>{{ forecast.date }}</strong></p>
                        <p>Temperature: {{ forecast.temp }}°C</p>
                        <p>Condition: {{ forecast.condition }}</p>
                        <p>Precipitation: {{ forecast.precipitation }}%</p>
                        <p>Wind Speed: {{ forecast.wind_speed }} m/s</p>
                        {% if forecast.warning %}
                        <p class="warning">{{ forecast.warning }}</p>
                        {% endif %}
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
    {% endfor %}
</div>
{% endblock %}

(static folder that houses css & py)

script.js - function toggleSidebar() {
    document.querySelector('.sidebar').classList.toggle('active');
}
(css folder inside of static)

styles.css - /* Import premium fonts from Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Lora:wght@400;700&display=swap');

/* Define color variables */
:root {
    --primary-color: #1E3A8A; /* Deep Blue */
    --secondary-color: #22C55E; /* Emerald Green */
    --accent-color: #F59E0B; /* Warm Amber */
    --background-color: #FFFFFF; /* White Background */
    --dark-background: #1F2937; /* Dark Slate Gray */
    --text-color: #1F2937; /* Dark Gray */
    --dark-text-color: #E5E7EB; /* Light Gray */
    --border-color: #E5E7EB; /* Light Gray */
    --banner-height: 80px;
}

/* Global Styles */
html, body {
    margin: 0 !important;
    padding: 0 !important;
    width: 100%;
    height: 100%;
    overflow-x: hidden;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: var(--background-color);
    color: var(--text-color);
    line-height: 1.6;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    transition: all 0.3s ease;
}

body.dark-mode {
    background-color: var(--dark-background);
    color: var(--dark-text-color);
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
    font-family: 'Lora', serif;
    font-weight: 700;
}

h1 { font-size: 2.5rem; }
h2 { font-size: 2rem; }
h3 { font-size: 1.75rem; }
h4 { font-size: 1.5rem; }
h5 { font-size: 1.25rem; }
h6 { font-size: 1rem; }

/* Top Banner */
.top-banner {
    background-color: var(--primary-color);
    color: #FFFFFF;
    padding: 16px 32px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1000;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    height: var(--banner-height);
}

.top-banner.login-banner {
    justify-content: center;
}

.brand-container {
    display: flex;
    align-items: center;
}

.brand {
    font-family: 'Lora', serif;
    font-size: 1.75rem;
    font-weight: 700;
    color: #FFFFFF;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: color 0.3s ease;
}

.brand:hover {
    color: var(--secondary-color);
}

.top-right-buttons {
    display: flex;
    align-items: center;
    gap: 12px;
}

.theme-toggle-btn, .notification-btn {
    background-color: var(--secondary-color);
    color: #FFFFFF;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    transition: all 0.3s ease;
}

.theme-toggle-btn:hover, .notification-btn:hover {
    background-color: #1EA74D;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

/* Sidebar */
.sidebar {
    background-color: var(--primary-color);
    color: #FFFFFF;
    width: 250px;
    position: fixed;
    top: var(--banner-height);
    left: 0;
    height: calc(100vh - var(--banner-height));
    padding: 20px;
    transition: transform 0.3s ease;
    z-index: 900;
    box-shadow: 4px 0 6px rgba(0, 0, 0, 0.1);
    overflow-y: auto;
}

.sidebar.collapsed {
    transform: translateX(-100%);
    width: 0;
}

.logo a {
    color: #FFFFFF;
    font-family: 'Lora', serif;
    font-size: 1.5rem;
    font-weight: 700;
    text-decoration: none;
    transition: color 0.3s ease;
}

.logo a:hover {
    color: var(--secondary-color);
}

.user-info {
    margin: 16px 0;
    font-size: 0.875rem;
    color: #D1D5DB;
}

.nav-link {
    display: flex;
    align-items: center;
    color: #FFFFFF;
    padding: 12px 16px;
    text-decoration: none;
    border-radius: 6px;
    font-size: 1rem;
    transition: all 0.3s ease;
}

.nav-link:hover {
    background-color: rgba(255, 255, 255, 0.1);
    color: var(--secondary-color);
}

.nav-link.active {
    background-color: var(--secondary-color);
    color: #FFFFFF;
}

.nav-link i {
    margin-right: 12px;
    font-size: 1.125rem;
}

.badge {
    background-color: var(--accent-color);
    color: #FFFFFF;
    border-radius: 12px;
    padding: 4px 8px;
    font-size: 0.75rem;
    margin-left: 8px;
}

/* Main Content */
.main-content {
    margin-top: var(--banner-height);
    margin-left: 250px;
    padding: 32px;
    flex: 1;
    background-color: var(--background-color);
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
    transition: all 0.3s ease;
}

.main-content.no-sidebar {
    margin: 0 auto;
    padding: 0 32px;
    width: 100%;
    min-height: calc(100vh - var(--banner-height));
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    background-color: var(--background-color);
    position: relative;
    top: var(--banner-height);
}

.main-content .container {
    width: 100%;
    max-width: 1200px;
    padding: 0;
}

/* Authentication Page */
.auth-page {
    background: linear-gradient(135deg, var(--primary-color) 0%, #4B6CB7 100%);
    background-size: cover;
    background-attachment: fixed;
    min-height: 100vh;
    width: 100%;
    margin: 0;
    padding: 0;
}

.auth-page .main-content {
    margin: 0 auto;
    padding: 0;
    width: 100%;
    min-height: calc(100vh - var(--banner-height));
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background: none;
}

/* Login Card */
.login-card {
    background: rgba(255, 255, 255, 0.9);
    padding: 2rem;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    max-width: 400px;
    width: 100%;
    text-align: center;
    margin: 0 auto;
    border: 1px solid var(--border-color);
}

.login-title {
    font-family: 'Lora', serif;
    font-size: 2.25rem;
    color: var(--primary-color);
    font-weight: 700;
    margin-bottom: 1.5rem;
    text-transform: uppercase;
}

.login-card .form-label {
    font-weight: 600;
    color: var(--text-color);
    margin-bottom: 0.5rem;
    display: block;
    text-align: left;
}

.login-card .form-control {
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.75rem;
    background-color: #FFFFFF;
    color: var(--text-color);
    width: 100%;
    margin-bottom: 1rem;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.login-card .form-control:focus {
    border-color: var(--secondary-color);
    outline: none;
    box-shadow: 0 0 0 0.2rem rgba(34, 197, 94, 0.25);
}

.login-card .btn-primary {
    background-color: var(--secondary-color);
    color: #FFFFFF;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(34, 197, 94, 0.3);
    font-size: 1rem;
    width: 100%;
    transition: all 0.3s ease;
}

.login-card .btn-primary:hover {
    background-color: #1EA74D;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(34, 197, 94, 0.4);
}

.login-card .register-link {
    display: block;
    margin-top: 1rem;
    color: var(--primary-color);
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.3s ease;
}

.login-card .register-link:hover {
    color: var(--accent-color);
    text-decoration: underline;
}

.login-time {
    margin-top: 1rem;
    font-size: 0.8rem;
    color: #666;
    font-style: italic;
}

/* Dashboard Enhancements */
.welcome-message {
    margin-bottom: 2rem;
    text-align: center;
    color: var(--text-color);
    padding: 20px;
    background-color: #F8F9FA;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.welcome-message h3 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    color: var(--primary-color);
}

.welcome-message p {
    font-size: 1rem;
    color: #666;
}

.dashboard-card {
    background-color: #FFFFFF;
    border: 1px solid var(--border-color);
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    width: 100%;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.dashboard-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
}

.dashboard-card h4 {
    color: var(--primary-color);
    margin-bottom: 1rem;
    font-size: 1.25rem;
}

.dashboard-card .chart-container {
    position: relative;
    height: 200px;
    width: 100%;
}

.dashboard-card .progress {
    height: 1rem;
    border-radius: 0.5rem;
    background-color: #E9ECEF;
}

.dashboard-card .progress-bar {
    background-color: var(--secondary-color);
    transition: width 0.3s ease;
}

.dashboard-card .table-responsive {
    overflow-x: auto;
}

.dashboard-card .table {
    margin-bottom: 0;
}

.dashboard-card .status-red {
    color: #DC3545;
}

.dashboard-card .status-orange {
    color: #F39C12;
}

#site-map {
    width: 100%;
    border-radius: 10px;
    overflow: hidden;
}

/* Cards */
.card {
    background-color: #FFFFFF;
    border: 1px solid var(--border-color);
    border-radius: 10px;
    margin-bottom: 24px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.card-body {
    padding: 20px;
}

.card-body h4 {
    color: var(--primary-color);
    margin-bottom: 16px;
    font-size: 1.25rem;
}

/* Tables */
.table {
    width: 100%;
    border-collapse: collapse;
    background-color: #FFFFFF;
    border-radius: 8px;
    overflow: hidden;
    margin-top: 16px;
}

.table th {
    background-color: var(--primary-color);
    color: #FFFFFF;
    font-size: 0.9rem;
    padding: 10px;
    text-align: left;
    text-transform: uppercase;
}

.table td {
    padding: 10px;
    border-bottom: 1px solid var(--border-color);
    font-size: 0.9rem;
}

.table-striped tbody tr:nth-of-type(odd) {
    background-color: #F8F9FA;
}

.table-hover tbody tr:hover {
    background-color: #E9ECEF;
}

/* Buttons */
.btn-primary {
    background-color: var(--secondary-color);
    color: #FFFFFF;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    font-size: 0.9rem;
}

.btn-primary:hover {
    background-color: #1EA74D;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.btn-secondary {
    background-color: var(--accent-color);
    color: #FFFFFF;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    font-size: 0.9rem;
}

.btn-secondary:hover {
    background-color: #D97706;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

/* Forms */
.form-label {
    font-weight: 600;
    color: var(--text-color);
    margin-bottom: 8px;
    display: block;
}

.form-control {
    border: 1px solid var(--border-color);
    border-radius: 6px;
    padding: 8px 12px;
    background-color: #FFFFFF;
    color: var(--text-color);
    width: 100%;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.form-control:focus {
    border-color: var(--secondary-color);
    outline: none;
    box-shadow: 0 0 0 0.2rem rgba(34, 197, 94, 0.25);
}

/* Footer */
.footer {
    background-color: var(--primary-color);
    color: #FFFFFF;
    text-align: center;
    padding: 16px 0;
    margin-top: auto;
    font-family: 'Lora', serif;
    font-size: 1rem;
}

/* Dark Mode Adjustments */
body.dark-mode .card {
    background-color: var(--dark-background);
    border-color: #374151;
}

body.dark-mode .form-control {
    background-color: #374151;
    color: var(--dark-text-color);
    border-color: #4B5563;
}

body.dark-mode .form-control:focus {
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 0.2rem rgba(34, 197, 94, 0.25);
}

body.dark-mode .table {
    background-color: var(--dark-background);
    color: var(--dark-text-color);
}

body.dark-mode .table th {
    background-color: var(--primary-color);
}

body.dark-mode .table-striped tbody tr:nth-of-type(odd) {
    background-color: #2D3748;
}

body.dark-mode .table-hover tbody tr:hover {
    background-color: #4B5563;
}

body.dark-mode .dashboard-card {
    background-color: var(--dark-background);
    color: var(--dark-text-color);
}

body.dark-mode .welcome-message {
    background-color: #2D3748;
    color: var(--dark-text-color);
}

body.dark-mode .welcome-message h3 {
    color: #A0AEC0;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

/* Responsive Design */
@media (max-width: 1200px) {
    .main-content {
        margin-left: 200px;
        padding: 24px;
    }
    .sidebar {
        width: 200px;
    }
}

@media (max-width: 992px) {
    .main-content {
        margin-left: 0;
        padding: 16px;
    }
    .sidebar {
        width: 0;
        transform: translateX(-100%);
    }
    .top-banner {
        padding: 10px 16px;
    }
    .dashboard-card {
        margin-bottom: 1rem;
    }
    .row {
        flex-direction: column;
    }
}

(js folder inside of static)

analytics.js document.addEventListener('DOMContentLoaded', () => {
    if (typeof Chart === 'undefined') {
        console.error('Chart.js failed to load.');
        return;
    }

    const orderTrendCanvas = document.getElementById('orderTrendChart');
    const incidentSummaryCanvas = document.getElementById('incidentSummaryChart');

    if (!orderTrendCanvas || !incidentSummaryCanvas) {
        console.error('Canvas elements not found.');
        return;
    }

    try {
        const orderTrendsLabels = JSON.parse(orderTrendCanvas.dataset.labels || '[]');
        const orderTrendsData = JSON.parse(orderTrendCanvas.dataset.values || '[]');
        const incidentSummaryLabels = JSON.parse(incidentSummaryCanvas.dataset.labels || '[]');
        const incidentSummaryData = JSON.parse(incidentSummaryCanvas.dataset.values || '[]');

        new Chart(orderTrendCanvas, {
            type: 'line',
            data: {
                labels: orderTrendsLabels,
                datasets: [{
                    label: 'Orders Placed',
                    data: orderTrendsData,
                    borderColor: '#14B8A6',
                    backgroundColor: 'rgba(20, 184, 166, 0.2)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Order Trends (Last 5 Days)' }
                },
                scales: {
                    y: { beginAtZero: true, title: { display: true, text: 'Orders' } },
                    x: {}
                }
            }
        });

        new Chart(incidentSummaryCanvas, {
            type: 'bar',
            data: {
                labels: incidentSummaryLabels,
                datasets: [{
                    label: 'Incident Summary',
                    data: incidentSummaryData,
                    backgroundColor: ['#EF4444', '#F97316', '#14B8A6'],
                    borderColor: ['#DC2626', '#EA580C', '#0D9488'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: 'Incident Summary by Type' }
                },
                scales: {
                    y: { beginAtZero: true, title: { display: true, text: 'Number of Incidents' } },
                    x: {}
                }
            }
        });
    } catch (error) {
        console.error('Error rendering charts:', error);
    }
});
dashboard.js document.addEventListener('DOMContentLoaded', () => {
    // Extract data from data-dashboard attribute
    const dashboardElement = document.querySelector('.main-content');
    const dashboardData = JSON.parse(dashboardElement.dataset.dashboard);

    // Initialize SortableJS for draggable widgets
    const sortable = new Sortable(document.querySelector('.main-content .row'), {
        animation: 150,
        handle: '.card',
        onStart: () => console.log('Dragging started'),
        onEnd: (evt) => console.log(`Dragging ended: ${evt.oldIndex} -> ${evt.newIndex}`)
    });

    // Initialize Socket.IO for collaboration
    const socket = io();
    const collabArea = document.querySelector('#collaboration-area');
    if (collabArea) {
        socket.on('collaborationUpdate', (update) => {
            collabArea.value = update || '';
        });
        collabArea.addEventListener('input', () => {
            socket.emit('collaborationUpdate', collabArea.value || '');
        });
    }

    // Initialize Leaflet map
    const mapContainer = document.querySelector('#site-map');
    if (mapContainer) {
        const map = L.map(mapContainer).setView([51.505, -0.09], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
        dashboardData.recentOrders.forEach(order => {
            if (order.vehicle && order.vehicle.latitude && order.vehicle.longitude) {
                L.marker([order.vehicle.latitude, order.vehicle.longitude]).addTo(map)
                    .bindPopup(`Order ${order.order_id || 'N/A'}: ${order.item || 'N/A'}<br>Site: ${order.site_id || 'N/A'}<br>Status: ${order.status || 'N/A'}`);
            }
        });
    }

    // Initialize Charts
    const initChart = (canvasId, chartType, labels, data, options = {}) => {
        const ctx = document.getElementById(canvasId)?.getContext('2d');
        if (ctx && typeof Chart !== 'undefined') {
            return new Chart(ctx, {
                type: chartType,
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: ['#F97316', '#10B981', '#14B8A6', '#60A5FA', '#28A745', '#FFA500'],
                        borderColor: ['#EA580C', '#059669', '#0D9488', '#3B82F6', '#14532D', '#EA580C'],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { position: 'top', labels: { color: document.body.classList.contains('dark-mode') ? '#E5E7EB' : '#1F2937' } },
                        title: { display: true, text: options.title || '', color: document.body.classList.contains('dark-mode') ? '#E5E7EB' : '#1F2937' }
                    },
                    ...(chartType === 'bar' && {
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Count', color: document.body.classList.contains('dark-mode') ? '#E5E7EB' : '#1F2937' } },
                            x: { title: { display: true, text: 'Type', color: document.body.classList.contains('dark-mode') ? '#E5E7EB' : '#1F2937' } }
                        }
                    }),
                    ...(chartType === 'line' && {
                        scales: {
                            y: { beginAtZero: true, title: { display: true, text: 'Incidents', color: document.body.classList.contains('dark-mode') ? '#E5E7EB' : '#1F2937' } },
                            x: { title: { display: true, text: 'Date', color: document.body.classList.contains('dark-mode') ? '#E5E7EB' : '#1F2937' } }
                        }
                    }),
                    ...(chartType === 'doughnut' && { cutout: '50%' }) // Doughnut-specific option
                }
            });
        } else {
            console.error(`Chart.js failed to load or canvas ${canvasId} not found.`);
        }
    };

    if (typeof Chart !== 'undefined') {
        // Order Status Chart
        initChart('orderStatusChart', 'doughnut', ['Pending', 'Received', 'In Production', 'Shipped'], dashboardData.statusCounts, { title: 'Order Status' });

        // Incident Types Chart
        initChart('incidentTypesChart', 'bar', ['Incident', 'Near-Miss', 'Hazard'], dashboardData.incidentTypes, { title: 'Incident Types' });

        // Tasks Progress Chart
        initChart('tasksProgressChart', 'bar', ['Completed', 'In Progress', 'Not Started'], [
            {{ tasks | selectattr('status', 'equalto', 'Completed') | list | length }},
            {{ tasks | selectattr('status', 'equalto', 'In Progress') | list | length }},
            {{ tasks | selectattr('status', 'equalto', 'Not Started') | list | length }}
        ], { title: 'Task Progress' });

        // Project Summary Chart (Demo Data)
        initChart('projectSummaryChart', 'bar', ['Active', 'Completed'], [3, 1], { title: 'Project Summary' });

        // Safety Trends Chart (Demo Data)
        initChart('safetyTrendsChart', 'line', ['2025-06-01', '2025-06-02', '2025-06-03'], [2, 1, 3], { title: 'Safety Trends' });

        // Resource Usage Chart (Demo Data)
        initChart('resourceUsageChart', 'doughnut', ['Equipment', 'Labor'], [5, 20], { title: 'Resource Allocation' });
    }

    // Table sorting function
    function sortTable(tableId, n) {
        let table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById(tableId);
        switching = true;
        dir = "asc";
        while (switching) {
            switching = false;
            rows = table.rows;
            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchcount++;
            } else {
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
});
dashboardCharts.js function getChartTextColor() {
    return document.body.classList.contains('dark-mode') ? '#b3b3b3' : '#000000';
}

function getChartBorderColor() {
    return document.body.classList.contains('dark-mode') ? '#333333' : '#dee2e6';
}

const vehiclesCanvas = document.getElementById('vehiclesChart');
if (vehiclesCanvas) {
    const vehiclesChart = new Chart(vehiclesCanvas.getContext('2d'), {
        type: 'bar',
        data: {
            labels: ['Trailers', 'Lorries', 'Concrete Lorries'],
            datasets: [
                {
                    label: 'In Factory',
                    data: [10, 20, 15], // Example data
                    backgroundColor: document.body.classList.contains('dark-mode') ? '#6c757d' : '#000000',
                    borderColor: getChartBorderColor(),
                    borderWidth: 1
                },
                {
                    label: 'On Road',
                    data: [5, 10, 8], // Example data
                    backgroundColor: document.body.classList.contains('dark-mode') ? '#17a2b8' : '#333333',
                    borderColor: getChartBorderColor(),
                    borderWidth: 1
                }
            ]
        },
        options: {
            scales: {
                x: { ticks: { color: getChartTextColor() }, grid: { color: getChartBorderColor() } },
                y: { ticks: { color: getChartTextColor() }, grid: { color: getChartBorderColor() } }
            },
            plugins: {
                legend: { labels: { color: getChartTextColor() } }
            }
        }
    });

    document.addEventListener('themeChanged', function () {
        vehiclesChart.options.scales.x.ticks.color = getChartTextColor();
        vehiclesChart.options.scales.y.ticks.color = getChartTextColor();
        vehiclesChart.options.plugins.legend.labels.color = getChartTextColor();
        vehiclesChart.data.datasets[0].backgroundColor = document.body.classList.contains('dark-mode') ? '#6c757d' : '#000000';
        vehiclesChart.data.datasets[1].backgroundColor = document.body.classList.contains('dark-mode') ? '#17a2b8' : '#333333';
        vehiclesChart.update();
    });
}
ganttchart.js document.addEventListener('DOMContentLoaded', function() {
    // Function to get chart text color based on theme
    function getChartTextColor() {
        return document.body.classList.contains('dark-mode') ? '#b3b3b3' : '#000000';
    }

    function getChartBorderColor() {
        return document.body.classList.contains('dark-mode') ? '#333333' : '#dee2e6';
    }

    const ganttCanvas = document.getElementById('ganttChart');
    if (ganttCanvas) {
        const labels = JSON.parse(ganttCanvas.getAttribute('data-labels') || '[]');
        const colors = JSON.parse(ganttCanvas.getAttribute('data-colors') || '[]');

        const ganttChart = new Chart(ganttCanvas.getContext('2d'), {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Tasks',
                    data: labels.map((_, index) => index + 1), // Simple index-based data for demo
                    backgroundColor: colors,
                    borderColor: getChartBorderColor(),
                    borderWidth: 1
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                scales: {
                    x: {
                        ticks: {
                            color: getChartTextColor()
                        },
                        grid: {
                            color: getChartBorderColor()
                        }
                    },
                    y: {
                        ticks: {
                            color: getChartTextColor()
                        },
                        grid: {
                            color: getChartBorderColor()
                        }
                    }
                },
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            color: getChartTextColor(),
                            font: {
                                size: 14
                            }
                        }
                    },
                    tooltip: {
                        enabled: true
                    }
                }
            }
        });

        // Update chart colors when theme changes
        document.addEventListener('themeChanged', function() {
            ganttChart.options.scales.x.ticks.color = getChartTextColor();
            ganttChart.options.scales.x.grid.color = getChartBorderColor();
            ganttChart.options.scales.y.ticks.color = getChartTextColor();
            ganttChart.options.scales.y.grid.color = getChartBorderColor();
            ganttChart.options.plugins.legend.labels.color = getChartTextColor();
            ganttChart.options.datasets[0].borderColor = getChartBorderColor();
            ganttChart.update();
        });
    }
});
insightsCharts.js document.addEventListener('DOMContentLoaded', function() {
    // Order Status Distribution Chart
    const orderStatusCanvas = document.getElementById('orderStatusChart');
    const statusCountsData = JSON.parse(orderStatusCanvas.getAttribute('data-status-counts') || '[]');
    const orderStatusChart = new Chart(orderStatusCanvas.getContext('2d'), {
        type: 'pie',
        data: {
            labels: ['Pending', 'Received', 'In Production', 'Shipped'],
            datasets: [{
                data: statusCountsData,
                backgroundColor: ['#dc3545', '#fd7e14', '#17a2b8', '#28a745'],
                borderColor: '#424242',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    labels: {
                        color: '#E0E0E0'
                    }
                }
            }
        }
    });

    // Incident Types Chart
    const incidentTypesCanvas = document.getElementById('incidentTypesChart');
    const incidentCounts = JSON.parse(incidentTypesCanvas.getAttribute('data-incident-counts') || '[]');
    const incidentTypesChart = new Chart(incidentTypesCanvas.getContext('2d'), {
        type: 'bar',
        data: {
            labels: ['Incident', 'Near-Miss', 'Hazard'],
            datasets: [{
                label: 'Incidents',
                data: incidentCounts,
                backgroundColor: '#dc3545',
                borderColor: '#424242',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    ticks: {
                        color: '#E0E0E0'
                    },
                    grid: {
                        color: '#424242'
                    }
                },
                y: {
                    ticks: {
                        color: '#E0E0E0'
                    },
                    grid: {
                        color: '#424242'
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        color: '#E0E0E0'
                    }
                }
            }
        }
    });

    // Vehicles Chart
    const vehiclesCanvas = document.getElementById('vehiclesChart');
    const vehiclesOnRoad = JSON.parse(vehiclesCanvas.getAttribute('data-vehicles-on-road') || '0');
    const vehiclesInYard = JSON.parse(vehiclesCanvas.getAttribute('data-vehicles-in-yard') || '0');
    const vehiclesChart = new Chart(vehiclesCanvas.getContext('2d'), {
        type: 'doughnut',
        data: {
            labels: ['On Road', 'In Yard'],
            datasets: [{
                data: [vehiclesOnRoad, vehiclesInYard],
                backgroundColor: ['#17a2b8', '#6c757d'],
                borderColor: '#424242',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    labels: {
                        color: '#E0E0E0'
                    }
                }
            }
        }
    });

    // Orders Over Time Chart
    const ordersOverTimeCanvas = document.getElementById('ordersOverTimeChart');
    const orderDates = JSON.parse(ordersOverTimeCanvas.getAttribute('data-order-dates') || '[]');
    const orderCounts = JSON.parse(ordersOverTimeCanvas.getAttribute('data-order-counts') || '[]');
    const ordersOverTimeChart = new Chart(ordersOverTimeCanvas.getContext('2d'), {
        type: 'line',
        data: {
            labels: orderDates,
            datasets: [{
                label: 'Orders',
                data: orderCounts,
                borderColor: '#17a2b8',
                backgroundColor: 'rgba(23, 162, 184, 0.2)',
                fill: true,
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    ticks: {
                        color: '#E0E0E0'
                    },
                    grid: {
                        color: '#424242'
                    }
                },
                y: {
                    ticks: {
                        color: '#E0E0E0'
                    },
                    grid: {
                        color: '#424242'
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        color: '#E0E0E0'
                    }
                }
            }
        }
    });

    // Incident Severity Chart
    const severityCanvas = document.getElementById('severityChart');
    const severityCounts = JSON.parse(severityCanvas.getAttribute('data-severity-counts') || '[]');
    const severityChart = new Chart(severityCanvas.getContext('2d'), {
        type: 'bar',
        data: {
            labels: ['Low', 'Medium', 'High'],
            datasets: [{
                label: 'Incidents',
                data: severityCounts,
                backgroundColor: ['#28a745', '#fd7e14', '#dc3545'],
                borderColor: '#424242',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    ticks: {
                        color: '#E0E0E0'
                    },
                    grid: {
                        color: '#424242'
                    }
                },
                y: {
                    ticks: {
                        color: '#E0E0E0'
                    },
                    grid: {
                        color: '#424242'
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        color: '#E0E0E0'
                    }
                }
            }
        }
    });

    // Subcontractor Approval Status Chart
    const subcontractorStatusCanvas = document.getElementById('subcontractorStatusChart');
    const subcontractorStatusCounts = JSON.parse(subcontractorStatusCanvas.getAttribute('data-subcontractor-status-counts') || '[]');
    const subcontractorStatusChart = new Chart(subcontractorStatusCanvas.getContext('2d'), {
        type: 'pie',
        data: {
            labels: ['Pending', 'Approved', 'Rejected'],
            datasets: [{
                data: subcontractorStatusCounts,
                backgroundColor: ['#fd7e14', '#28a745', '#dc3545'],
                borderColor: '#424242',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    labels: {
                        color: '#E0E0E0'
                    }
                }
            }
        }
    });

    // Manpower Trend Chart
    const manpowerTrendCanvas = document.getElementById('manpowerTrendChart');
    const manpowerDates = JSON.parse(manpowerTrendCanvas.getAttribute('data-manpower-dates') || '[]');
    const manpowerValues = JSON.parse(manpowerTrendCanvas.getAttribute('data-manpower-values') || '[]');
    const manpowerTrendChart = new Chart(manpowerTrendCanvas.getContext('2d'), {
        type: 'line',
        data: {
            labels: manpowerDates,
            datasets: [{
                label: 'Manpower',
                data: manpowerValues,
                borderColor: '#28a745',
                backgroundColor: 'rgba(40, 167, 69, 0.2)',
                fill: true,
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            scales: {
                x: {
                    ticks: {
                        color: '#E0E0E0'
                    },
                    grid: {
                        color: '#424242'
                    }
                },
                y: {
                    ticks: {
                        color: '#E0E0E0'
                    },
                    grid: {
                        color: '#424242'
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        color: '#E0E0E0'
                    }
                }
            }
        }
    });
});
loadingSpinner.js document.addEventListener('DOMContentLoaded', () => {
    const spinner = document.getElementById('loading-spinner');

    // Show spinner on page load
    spinner.style.display = 'block';

    // Hide spinner after 1 second (mock loading time)
    setTimeout(() => {
        spinner.style.display = 'none';
    }, 1000);
});
server.js const express = require('express');
     const http = require('http');
     const { Server } = require('socket.io');

     const app = express();
     const server = http.createServer(app);
     const io = new Server(server);

     io.on('connection', (socket) => {
         console.log('A user connected');

         socket.on('message', (msg) => {
             io.emit('message', msg); // Broadcast to all clients
         });

         socket.on('collaborationUpdate', (update) => {
             io.emit('collaborationUpdate', update); // Broadcast collaboration updates
         });

         socket.on('disconnect', () => {
             console.log('A user disconnected');
         });
     });

     server.listen(3000, () => {
         console.log('Server running on http://localhost:3000');
     });
sidebarToggle.js document.addEventListener('DOMContentLoaded', () => {
    const sidebar = document.getElementById('sidebar');
    const mainContent = document.querySelector('.main-content');
    const sidebarToggle = document.getElementById('sidebar-toggle');

    // Check local storage for sidebar state
    const sidebarState = localStorage.getItem('sidebarState');
    if (sidebarState === 'collapsed') {
        sidebar.classList.add('collapsed');
        mainContent.classList.add('sidebar-collapsed');
        sidebarToggle.innerHTML = '<i class="fas fa-bars"></i>';
    } else {
        sidebar.classList.remove('collapsed');
        mainContent.classList.remove('sidebar-collapsed');
        sidebarToggle.innerHTML = '<i class="fas fa-times"></i>';
    }

    // Toggle sidebar on button click
    sidebarToggle.addEventListener('click', () => {
        sidebar.classList.toggle('collapsed');
        mainContent.classList.toggle('sidebar-collapsed');

        if (sidebar.classList.contains('collapsed')) {
            sidebarToggle.innerHTML = '<i class="fas fa-bars"></i>';
            localStorage.setItem('sidebarState', 'collapsed');
        } else {
            sidebarToggle.innerHTML = '<i class="fas fa-times"></i>';
            localStorage.setItem('sidebarState', 'expanded');
        }
    });
});
tasks.js document.addEventListener('DOMContentLoaded', function() {
    // Form validation for adding a task
    const taskForm = document.querySelector('form');
    if (taskForm) {
        taskForm.addEventListener('submit', function(event) {
            const title = document.getElementById('title').value.trim();
            const assignedTo = document.getElementById('assigned_to').value;
            const dueDate = document.getElementById('due_date').value;

            if (!title) {
                alert('Task title is required.');
                event.preventDefault();
                return;
            }

            if (!assignedTo) {
                alert('Please assign the task to an employee.');
                event.preventDefault();
                return;
            }

            if (!dueDate) {
                alert('Due date is required.');
                event.preventDefault();
                return;
            }

            const today = new Date().toISOString().split('T')[0];
            if (dueDate < today) {
                alert('Due date cannot be in the past.');
                event.preventDefault();
            }
        });
    }
});
themeToggle.js document.addEventListener('DOMContentLoaded', () => {
    const body = document.body;
    const themeToggle = document.getElementById('theme-toggle');

    // Check local storage for theme preference
    const theme = localStorage.getItem('theme') || 'light-mode';
    body.classList.add(theme);
    themeToggle.innerHTML = theme === 'light-mode' ? '<i class="fas fa-moon"></i>' : '<i class="fas fa-sun"></i>';

    // Toggle theme on button click
    themeToggle.addEventListener('click', () => {
        body.classList.toggle('dark-mode');
        body.classList.toggle('light-mode');
        const newTheme = body.classList.contains('dark-mode') ? 'dark-mode' : 'light-mode';
        localStorage.setItem('theme', newTheme);
        themeToggle.innerHTML = newTheme === 'light-mode' ? '<i class="fas fa-moon"></i>' : '<i class="fas fa-sun"></i>';
    });
});
track_order.js document.addEventListener('DOMContentLoaded', function() {
    const mapElement = document.getElementById('map');
    if (!mapElement) return; // Exit if map element is not found

    // Get data from HTML data attributes
    const latitude = parseFloat(mapElement.dataset.latitude);
    const longitude = parseFloat(mapElement.dataset.longitude);
    const trailerId = mapElement.dataset.trailerId;

    // Validate the data before initializing the map
    if (isNaN(latitude) || isNaN(longitude) || !trailerId) {
        console.error('Invalid latitude, longitude, or trailerId:', { latitude, longitude, trailerId });
        return;
    }

    // Initialize the Leaflet map
    const map = L.map('map').setView([latitude, longitude], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);
    L.marker([latitude, longitude]).addTo(map)
        .bindPopup('Trailer ' + trailerId).openPopup();
});


